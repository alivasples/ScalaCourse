import org.scalatest.funsuite.AnyFunSuite

class S2_Tester extends AnyFunSuite{
  test("Q1"){
    assert(S2.toBinary(9) == "1001")
    assert(S2.toBinary(607) == "1001011111")
    assert(S2.toBinary(454) == "111000110")
    assert(S2.toBinary(667) == "1010011011")
    assert(S2.toBinary(401) == "110010001")
    assert(S2.toBinary(467) == "111010011")
    assert(S2.toBinary(163) == "10100011")
    assert(S2.toBinary(351) == "101011111")
    assert(S2.toBinary(899) == "1110000011")
    assert(S2.toBinary(953) == "1110111001")
    assert(S2.toBinary(17) == "10001")
    assert(S2.toBinary(332) == "101001100")
    assert(S2.toBinary(176) == "10110000")
    assert(S2.toBinary(105) == "1101001")
    assert(S2.toBinary(347) == "101011011")
    assert(S2.toBinary(89) == "1011001")
    assert(S2.toBinary(493) == "111101101")
    assert(S2.toBinary(795) == "1100011011")
    assert(S2.toBinary(290) == "100100010")
    assert(S2.toBinary(279) == "100010111")
    assert(S2.toBinary(15) == "1111")
    assert(S2.toBinary(799) == "1100011111")
    assert(S2.toBinary(278) == "100010110")
    assert(S2.toBinary(376) == "101111000")
    assert(S2.toBinary(45) == "101101")
    assert(S2.toBinary(704) == "1011000000")
    assert(S2.toBinary(244) == "11110100")
    assert(S2.toBinary(617) == "1001101001")
    assert(S2.toBinary(818) == "1100110010")
    assert(S2.toBinary(873) == "1101101001")
    assert(S2.toBinary(933) == "1110100101")
    assert(S2.toBinary(14) == "1110")
    assert(S2.toBinary(882) == "1101110010")
    assert(S2.toBinary(409) == "110011001")
    assert(S2.toBinary(290) == "100100010")
    assert(S2.toBinary(927) == "1110011111")
    assert(S2.toBinary(140) == "10001100")
    assert(S2.toBinary(272) == "100010000")
    assert(S2.toBinary(243) == "11110011")
    assert(S2.toBinary(363) == "101101011")
    assert(S2.toBinary(823) == "1100110111")
    assert(S2.toBinary(326) == "101000110")
    assert(S2.toBinary(888) == "1101111000")
    assert(S2.toBinary(970) == "1111001010")
    assert(S2.toBinary(984) == "1111011000")
    assert(S2.toBinary(663) == "1010010111")
    assert(S2.toBinary(458) == "111001010")
    assert(S2.toBinary(676) == "1010100100")
    assert(S2.toBinary(809) == "1100101001")
    assert(S2.toBinary(546) == "1000100010")
    assert(S2.toBinary(964) == "1111000100")
    assert(S2.toBinary(163) == "10100011")
    assert(S2.toBinary(706) == "1011000010")
    assert(S2.toBinary(577) == "1001000001")
    assert(S2.toBinary(382) == "101111110")
    assert(S2.toBinary(145) == "10010001")
    assert(S2.toBinary(65) == "1000001")
    assert(S2.toBinary(730) == "1011011010")
    assert(S2.toBinary(413) == "110011101")
    assert(S2.toBinary(340) == "101010100")
    assert(S2.toBinary(383) == "101111111")
    assert(S2.toBinary(561) == "1000110001")
    assert(S2.toBinary(859) == "1101011011")
    assert(S2.toBinary(994) == "1111100010")
    assert(S2.toBinary(228) == "11100100")
    assert(S2.toBinary(491) == "111101011")
    assert(S2.toBinary(325) == "101000101")
    assert(S2.toBinary(556) == "1000101100")
    assert(S2.toBinary(876) == "1101101100")
    assert(S2.toBinary(915) == "1110010011")
    assert(S2.toBinary(754) == "1011110010")
    assert(S2.toBinary(406) == "110010110")
    assert(S2.toBinary(343) == "101010111")
    assert(S2.toBinary(916) == "1110010100")
    assert(S2.toBinary(600) == "1001011000")
    assert(S2.toBinary(489) == "111101001")
    assert(S2.toBinary(153) == "10011001")
    assert(S2.toBinary(629) == "1001110101")
    assert(S2.toBinary(777) == "1100001001")
    assert(S2.toBinary(128) == "10000000")
    assert(S2.toBinary(607) == "1001011111")
    assert(S2.toBinary(310) == "100110110")
    assert(S2.toBinary(717) == "1011001101")
    assert(S2.toBinary(345) == "101011001")
    assert(S2.toBinary(956) == "1110111100")
    assert(S2.toBinary(567) == "1000110111")
    assert(S2.toBinary(450) == "111000010")
    assert(S2.toBinary(445) == "110111101")
    assert(S2.toBinary(623) == "1001101111")
    assert(S2.toBinary(80) == "1010000")
    assert(S2.toBinary(596) == "1001010100")
    assert(S2.toBinary(897) == "1110000001")
    assert(S2.toBinary(517) == "1000000101")
    assert(S2.toBinary(247) == "11110111")
    assert(S2.toBinary(788) == "1100010100")
    assert(S2.toBinary(23) == "10111")
    assert(S2.toBinary(330) == "101001010")
    assert(S2.toBinary(819) == "1100110011")
    assert(S2.toBinary(685) == "1010101101")
    assert(S2.toBinary(482) == "111100010")
  }

  test("Q2"){
    assert(S2.toDecimal("1000101101") == 557)
    assert(S2.toDecimal("1110111") == 119)
    assert(S2.toDecimal("1011101100") == 748)
    assert(S2.toDecimal("1101") == 13)
    assert(S2.toDecimal("101111110") == 382)
    assert(S2.toDecimal("1010000101") == 645)
    assert(S2.toDecimal("1011110011") == 755)
    assert(S2.toDecimal("1100110") == 102)
    assert(S2.toDecimal("100001000") == 264)
    assert(S2.toDecimal("1110101100") == 940)
    assert(S2.toDecimal("101111111") == 383)
    assert(S2.toDecimal("100000000") == 256)
    assert(S2.toDecimal("1010101100") == 684)
    assert(S2.toDecimal("10110000") == 176)
    assert(S2.toDecimal("11101111") == 239)
    assert(S2.toDecimal("1110010011") == 915)
    assert(S2.toDecimal("1010011100") == 668)
    assert(S2.toDecimal("110110100") == 436)
    assert(S2.toDecimal("11110010") == 242)
    assert(S2.toDecimal("101111011") == 379)
    assert(S2.toDecimal("1111001101") == 973)
    assert(S2.toDecimal("11101101") == 237)
    assert(S2.toDecimal("101101101") == 365)
    assert(S2.toDecimal("11110100") == 244)
    assert(S2.toDecimal("10010110") == 150)
    assert(S2.toDecimal("1011011101") == 733)
    assert(S2.toDecimal("10110") == 22)
    assert(S2.toDecimal("1011") == 11)
    assert(S2.toDecimal("1100001100") == 780)
    assert(S2.toDecimal("1100001000") == 776)
    assert(S2.toDecimal("100001111") == 271)
    assert(S2.toDecimal("1110101100") == 940)
    assert(S2.toDecimal("1001101110") == 622)
    assert(S2.toDecimal("1101110111") == 887)
    assert(S2.toDecimal("1111001000") == 968)
    assert(S2.toDecimal("1000000111") == 519)
    assert(S2.toDecimal("1100000110") == 774)
    assert(S2.toDecimal("111011001") == 473)
    assert(S2.toDecimal("11001001") == 201)
    assert(S2.toDecimal("1110111011") == 955)
    assert(S2.toDecimal("10000110") == 134)
    assert(S2.toDecimal("100110110") == 310)
    assert(S2.toDecimal("1011100") == 92)
    assert(S2.toDecimal("1001011001") == 601)
    assert(S2.toDecimal("111011111") == 479)
    assert(S2.toDecimal("110011100") == 412)
    assert(S2.toDecimal("1010111110") == 702)
    assert(S2.toDecimal("1101010011") == 851)
    assert(S2.toDecimal("11010111") == 215)
    assert(S2.toDecimal("100011001") == 281)
    assert(S2.toDecimal("11111000") == 248)
    assert(S2.toDecimal("1010000000") == 640)
    assert(S2.toDecimal("100010000") == 272)
    assert(S2.toDecimal("111011011") == 475)
    assert(S2.toDecimal("10101100") == 172)
    assert(S2.toDecimal("10111") == 23)
    assert(S2.toDecimal("111100001") == 481)
    assert(S2.toDecimal("1010110100") == 692)
    assert(S2.toDecimal("1000111011") == 571)
    assert(S2.toDecimal("1001111010") == 634)
    assert(S2.toDecimal("1001001001") == 585)
    assert(S2.toDecimal("10100111") == 167)
    assert(S2.toDecimal("110000010") == 386)
    assert(S2.toDecimal("11101011") == 235)
    assert(S2.toDecimal("1010100010") == 674)
    assert(S2.toDecimal("1100010100") == 788)
    assert(S2.toDecimal("1011101110") == 750)
    assert(S2.toDecimal("111100001") == 481)
    assert(S2.toDecimal("100111011") == 315)
    assert(S2.toDecimal("1001101101") == 621)
    assert(S2.toDecimal("1011011111") == 735)
    assert(S2.toDecimal("1111010101") == 981)
    assert(S2.toDecimal("101100001") == 353)
    assert(S2.toDecimal("1111001111") == 975)
    assert(S2.toDecimal("1000101111") == 559)
    assert(S2.toDecimal("10011") == 19)
    assert(S2.toDecimal("111101100") == 492)
    assert(S2.toDecimal("11111111") == 255)
    assert(S2.toDecimal("1000111000") == 568)
    assert(S2.toDecimal("1010101010") == 682)
    assert(S2.toDecimal("11000001") == 193)
    assert(S2.toDecimal("100011010") == 282)
    assert(S2.toDecimal("10000110") == 134)
    assert(S2.toDecimal("101001010") == 330)
    assert(S2.toDecimal("1101000100") == 836)
    assert(S2.toDecimal("110011111") == 415)
    assert(S2.toDecimal("11110110") == 246)
    assert(S2.toDecimal("10101010") == 170)
    assert(S2.toDecimal("1000111010") == 570)
    assert(S2.toDecimal("1110101010") == 938)
    assert(S2.toDecimal("1010001101") == 653)
    assert(S2.toDecimal("1100101011") == 811)
    assert(S2.toDecimal("101010100") == 340)
    assert(S2.toDecimal("1010110101") == 693)
    assert(S2.toDecimal("1100011100") == 796)
    assert(S2.toDecimal("1000011110") == 542)
    assert(S2.toDecimal("1001101111") == 623)
    assert(S2.toDecimal("10101000") == 168)
    assert(S2.toDecimal("1001001010") == 586)
    assert(S2.toDecimal("110010011") == 403)
  }

  test("Q3"){
    assert(S2.reverse("ddmkpnlvpecdbttbjalxmsd") == "dsmxlajbttbdcepvlnpkmdd")
    assert(S2.reverse("aqtoaykytgcoeatkqajukaplkoqsgmhnlhmjgjfqiorokcauhabu") == "ubahuackoroiqfjgjmhlnhmgsqoklpakujaqktaeocgtykyaotqa")
    assert(S2.reverse("icupqc") == "cqpuci")
    assert(S2.reverse("tmsjuzodazfjogvtzstuubzddrjodxbhsrbzgbbaagfobcqqiszyhgvpzhvymtabsshfvheeeataiksmftqkydn") == "ndykqtfmskiataeeehvfhssbatmyvhzpvghyzsiqqcbofgaabbgzbrshbxdojrddzbuutsztvgojfzadozujsmt")
    assert(S2.reverse("gjulqsztijsqzfmkkzxtikbxjhfgszuecqdaiiilowfeyxlhmvovejimabscfrqtewcnuascyvkxqiifuni") == "inufiiqxkvycsauncwetqrfcsbamijevovmhlxyefwoliiiadqceuzsgfhjxbkitxzkkmfzqsjitzsqlujg")
    assert(S2.reverse("gjpxuwwzvkoyuhbnfhikjyiagmhjuhxjnzgghaufrmggczqgevqfydddrrxo") == "oxrrdddyfqvegqzcggmrfuahggznjxhujhmgaiyjkihfnbhuyokvzwwuxpjg")
    assert(S2.reverse("oqdccidtcnyfwfmpnyihndalkqwoegemslhipbuaxnstjmdbzgzmarzakaogfzcc") == "cczfgoakazramzgzbdmjtsnxaubpihlsmegeowqkladnhiynpmfwfynctdiccdqo")
    assert(S2.reverse("nfdqxzjrwsfpiktraubmitlnjgbeaxjlcziwlror") == "rorlwizcljxaebgjnltimbuartkipfswrjzxqdfn")
    assert(S2.reverse("yxhikhucbkyxljqkdkjywtubjemvfmxhedtaqwqfmhvltkggmbfrjffogtnqbl") == "lbqntgoffjrfbmggktlvhmfqwqatdehxmfvmejbutwyjkdkqjlxykbcuhkihxy")
    assert(S2.reverse("kokvyjpclizjstaiokoghbpzpmjjizmsrrpmurgjcymyowbqogkucpnesjyqkwy") == "ywkqyjsenpcukgoqbwoymycjgrumprrsmzijjmpzpbhgokoiatsjzilcpjyvkok")
    assert(S2.reverse("fnbvuckm") == "mkcuvbnf")
    assert(S2.reverse("uxgdgncfjdzgrzcjbzoeghvkcwhncbebibvscjzwjxrtatmvwhxjplohsvisfifgdjqguwsjnbhelxjvtxplswyzksda") == "adskzywslpxtvjxlehbnjswugqjdgfifsivsholpjxhwvmtatrxjwzjcsvbibebcnhwckvhgeozbjczrgzdjfcngdgxu")
    assert(S2.reverse("bipcmuvrjjlowycmxcgeftwnathqcbkohbyrqfgnkxojshhcdtvqctkiwvkhdohlinmawntscrhgunbyiezmegixxbx") == "xbxxigemzeiybnughrcstnwamnilhodhkvwiktcqvtdchhsjoxkngfqrybhokbcqhtanwtfegcxmcywoljjrvumcpib")
    assert(S2.reverse("fudyyeeteqzydzayqvvgsmzdgejkwydfcgvndrdwcreuqnnhdiasyitvkuehvjdmosn") == "nsomdjvheukvtiysaidhnnquercwdrdnvgcfdywkjegdzmsgvvqyazdyzqeteeyyduf")
    assert(S2.reverse("rgmcqcxclbyvnudgsbzstrvilpoqvpfkioslumelskjzbjtgpaicsilcikvzqvqqxuklvixsqqqbyujcmdux") == "xudmcjuybqqqsxivlkuxqqvqzvkiclisciapgtjbzjkslemulsoikfpvqoplivrtszbsgdunvyblcxcqcmgr")
    assert(S2.reverse("fgikqnekbptyobzplhnggcteybzgdgeenvbpakrzbrmzsjcpzkilbvqzgxvl") == "lvxgzqvblikzpcjszmrbzrkapbvneegdgzbyetcggnhlpzboytpbkenqkigf")
    assert(S2.reverse("pifklvmfmcjubvpfljsauoqcffmkddncsfbgfillzaf") == "fazllifgbfscnddkmffcqouasjlfpvbujcmfmvlkfip")
    assert(S2.reverse("nveyizweyqxzteiwfjwkmmftpcoqpixwzrwietpcxjgwqngsdnwspdnpi") == "ipndpswndsgnqwgjxcpteiwrzwxipqocptfmmkwjfwietzxqyewziyevn")
    assert(S2.reverse("zaxmvprwxkwzdebsvvcwipysdxcpgtsikjlqitjxwosdpdbfdqdpiqounffkjfjqcudqqwbdkgogptnrpqubaisk") == "ksiabuqprntpgogkdbwqqducqjfjkffnuoqipdqdfbdpdsowxjtiqljkistgpcxdsypiwcvvsbedzwkxwrpvmxaz")
    assert(S2.reverse("lnxndbejflgyahazqxjkqstibeu") == "uebitsqkjxqzahayglfjebdnxnl")
    assert(S2.reverse("brktevvrealdlafbxufjrvghwgcpla") == "alpcgwhgvrjfuxbfaldlaervvetkrb")
    assert(S2.reverse("rwclyarlnwfmqtisxgxfjeqvqduowlgumrlxuczkuvsgsvkfadbmzjm") == "mjzmbdafkvsgsvukzcuxlrmuglwoudqvqejfxgxsitqmfwnlraylcwr")
    assert(S2.reverse("gaimnemvyabtnlvavylzcvtfewecpncyzjcnb") == "bncjzycnpceweftvczlyvavlntbayvmenmiag")
    assert(S2.reverse("uufvwitxzhpcalkowcypuptlshuimozoqtluobemnkhcyuibrfdhcpxeqmozteppxq") == "qxppetzomqexpchdfrbiuychknmeboultqozomiuhsltpupycwoklacphzxtiwvfuu")
    assert(S2.reverse("ojyyjkyetsroiudoitkoyrpbzflpxpgdujyppfrrflrzefqnnfgbspljsdrcnbbnwlfalbfembq") == "qbmefblaflwnbbncrdsjlpsbgfnnqfezrlfrrfppyjudgpxplfzbpryoktioduiorsteykjyyjo")
    assert(S2.reverse("ixatdcxkypqltxiobpzrcbnornnzybfpjmwswwcaykczqrxlefacdhbjdfliegg") == "ggeilfdjbhdcafelxrqzckyacwwswmjpfbyznnronbcrzpboixtlqpykxcdtaxi")
    assert(S2.reverse("dbsxnixvjusjqqqzgxrpivnpvtmoblxsoniksnsvqowyxjqiuxubhlvbejyspl") == "lpsyjebvlhbuxuiqjxywoqvsnskinosxlbomtvpnviprxgzqqqjsujvxinxsbd")
    assert(S2.reverse("pvnbdwxwqmmombqmctcdvzdjpazubcygvougivyqwliqraa") == "aarqilwqyviguovgycbuzapjdzvdctcmqbmommqwxwdbnvp")
    assert(S2.reverse("yrtanuzri") == "irzunatry")
    assert(S2.reverse("lreunogpseemeywbowcqsxrgalwydgqenkltcekdskbsaxdufsnyrrqivyljsqrjbegsqzegmctepigkiefsinciazgfhxikamjc") == "cjmakixhfgzaicnisfeikgipetcmgezqsgebjrqsjlyviqrrynsfudxasbksdkectlkneqgdywlagrxsqcwobwyemeespgonuerl")
    assert(S2.reverse("daummrf") == "frmmuad")
    assert(S2.reverse("rvvofapfezcgitbmgiooghantfkiaytjbznoxpvzmxbwshsrhadidl") == "ldidahrshswbxmzvpxonzbjtyaikftnahgooigmbtigczefpafovvr")
    assert(S2.reverse("vdwglwskimpflftagdliwrhuxgruqffirjsxapfmrkpjcjlfxkzeymzzo") == "ozzmyezkxfljcjpkrmfpaxsjriffqurgxuhrwildgatflfpmikswlgwdv")
    assert(S2.reverse("ilutjdwfkigrkwxuzloypaskbgggx") == "xgggbksapyolzuxwkrgikfwdjtuli")
    assert(S2.reverse("engikttcrsnwcyadgoutfifxsnxckrajtsajkvxdchrjtmqbkemkijnpa") == "apnjikmekbqmtjrhcdxvkjastjarkcxnsxfiftuogdaycwnsrcttkigne")
    assert(S2.reverse("rkgmhwxhfwbcerp") == "precbwfhxwhmgkr")
    assert(S2.reverse("xdvkz") == "zkvdx")
    assert(S2.reverse("fllbkfuigodrmvmxbkyfyoqyskqblrqqogyfnsyncsdjjmisxothyvdrqlaicvasadnoikhjw") == "wjhkiondasavcialqrdvyhtoxsimjjdscnysnfygoqqrlbqksyqoyfykbxmvmrdogiufkbllf")
    assert(S2.reverse("xxohjtkdsrriukjadozjrgvcjsngtaoyyyytf") == "ftyyyyoatgnsjcvgrjzodajkuirrsdktjhoxx")
    assert(S2.reverse("aqnvsgapzqhmiwezqxeeayuksmgjcmhocxpwg") == "gwpxcohmcjgmskuyaeexqzewimhqzpagsvnqa")
    assert(S2.reverse("dkjttaudtxlylfomlatczdrswtrvnqmafrlbzhrsylogppndtuulwcwiracmpfryc") == "cyrfpmcariwcwluutdnppgolysrhzblrfamqnvrtwsrdzctalmoflylxtduattjkd")
    assert(S2.reverse("ergmopisfqt") == "tqfsipomgre")
    assert(S2.reverse("sfrzonsylklfuttlhuxmnxtvvtunzoyfmeuwbyjqqisjofxlhqprjqrvtfchkwaiphzpuiasqclqoytwwcp") == "pcwwtyoqlcqsaiupzhpiawkhcftvrqjrpqhlxfojsiqqjybwuemfyoznutvvtxnmxuhlttuflklysnozrfs")
    assert(S2.reverse("lpmvtmbrrbopxnmxhdjhfgqbjtwtcugciglilhuinropnqxcjtxjy") == "yjxtjcxqnporniuhlilgicguctwtjbqgfhjdhxmnxpobrrbmtvmpl")
    assert(S2.reverse("uvyfoyppkefqadhozlpbdqijazhheteayxofoucwgkfmzmvesbkuwnqvkmtyneackkmrufegoej") == "jeogefurmkkcaenytmkvqnwukbsevmzmfkgwcuofoxyaetehhzajiqdbplzohdaqfekppyofyvu")
    assert(S2.reverse("udawrtphwwgxjcqoafdhwm") == "mwhdfaoqcjxgwwhptrwadu")
    assert(S2.reverse("vkegwjejqiozgjtrkfejmgnlzmtwxczkktemwjwqfntfiqqdxduhsbbptqppdarbckgepxxmektrxwiigglbvkppbnfjoba") == "abojfnbppkvblggiiwxrtkemxxpegkcbradppqtpbbshudxdqqiftnfqwjwmetkkzcxwtmzlngmjefkrtjgzoiqjejwgekv")
    assert(S2.reverse("nwllytjejtxm") == "mxtjejtyllwn")
    assert(S2.reverse("ntwled") == "delwtn")
    assert(S2.reverse("mlxcatz") == "ztacxlm")
    assert(S2.reverse("dyhywyotztrojlchaeafhkkjxgphjfrohykxoomlceioegmonpsglodewshquvydzpilwaqhtt") == "tthqawlipzdyvuqhswedolgspnomgeoieclmooxkyhorfjhpgxjkkhfaeahcljortztoywyhyd")
    assert(S2.reverse("tajyhudvcfxadzgp") == "pgzdaxfcvduhyjat")
    assert(S2.reverse("ifgjlmmgquoqcnoncylurbunoqycgzfcbhojildynobbvtahvdqfjdecfunbzugmbojeatnrqfj") == "jfqrntaejobmguzbnufcedjfqdvhatvbbonydlijohbcfzgcyqonubrulycnoncqouqgmmljgfi")
    assert(S2.reverse("zhxjuynguxspdutbzfslwrxqatthuzisclqwsagxzbwdwcvqfxuplgopuscj") == "jcsupoglpuxfqvcwdwbzxgaswqlcsizuhttaqxrwlsfzbtudpsxugnyujxhz")
    assert(S2.reverse("jurktsdrhrvyntoajejqmydeokogkyvyezwv") == "vwzeyvykgokoedymqjejaotnyvrhrdstkruj")
    assert(S2.reverse("ivveucbqyievnrcsujqnjccxsjbcckijqocwnrbyyv") == "vyybrnwcoqjikccbjsxccjnqjuscrnveiyqbcuevvi")
    assert(S2.reverse("xybnigmtzih") == "hiztmginbyx")
    assert(S2.reverse("ccwciohdypmgsrheuoqwcjmvkkx") == "xkkvmjcwqouehrsgmpydhoicwcc")
    assert(S2.reverse("dpnynl") == "lnynpd")
    assert(S2.reverse("jsdgfxxfsraulwttwvyznmbbofskvwvzwxakqwksgwaefjffhsrusvpwihgrrsksteryqki") == "ikqyretsksrrghiwpvsurshffjfeawgskwqkaxwzvwvksfobbmnzyvwttwluarsfxxfgdsj")
    assert(S2.reverse("asrfaqz") == "zqafrsa")
    assert(S2.reverse("coqytzmavvikoejkapqvlxyxeuahmttwmijsuczaodgi") == "igdoazcusjimwttmhauexyxlvqpakjeokivvamztyqoc")
    assert(S2.reverse("rbljzjqorhrxsroweyrjriomsfwyywvtfplfkhkfppqcleimrypyduajycokntbyluxexidgxyqspribjbuicghydzfuevakjja") == "ajjkaveufzdyhgciubjbirpsqyxgdixexulybtnkocyjaudypyrmielcqppfkhkflpftvwyywfsmoirjryeworsxrhroqjzjlbr")
    assert(S2.reverse("cqllnfrddzschxoyvwyoseq") == "qesoywvyoxhcszddrfnllqc")
    assert(S2.reverse("npfjnjpuupluxvaqogvqycaosinfqxvryhyzrcvkjrkwnpxrgqjgurjqpqqughoydcmwrtzqbglwmopdvpdeugfryrmescw") == "wcsemryrfguedpvdpomwlgbqztrwmcdyohguqqpqjrugjqgrxpnwkrjkvcrzyhyrvxqfnisoacyqvgoqavxulpuupjnjfpn")
    assert(S2.reverse("omajtannzxwvmzjvuoeyvtdmzsxysukaqgbvuerepkf") == "fkpereuvbgqakusyxszmdtvyeouvjzmvwxznnatjamo")
    assert(S2.reverse("djflwfxgnuvndskzacpbrbuqsflupuckgitiipzueaykxpqginnwqu") == "uqwnnigqpxkyaeuzpiitigkcupulfsqubrbpcazksdnvungxfwlfjd")
    assert(S2.reverse("knahhqpkrakuytozppmguevmqoabxyseytzeygxirauwsczgtokovwnploynwjeznrhlah") == "halhrnzejwnyolpnwvokotgzcswuarixgyeztyesyxbaoqmveugmppzotyukarkpqhhank")
    assert(S2.reverse("ayzuxxlwdcddasshyqelndvvvluaeodweemqhcklilllbrmhgcriigfdinjxrdiqptxhlosztcdebetxbewee") == "eewebxtebedctzsolhxtpqidrxjnidfgiircghmrblllilkchqmeewdoeaulvvvdnleqyhssaddcdwlxxuzya")
    assert(S2.reverse("dbogmduhztfrdojegyjotprxzpd") == "dpzxrptojygejodrftzhudmgobd")
    assert(S2.reverse("whuizulkrkvvfuozllndnyrtduhdxtzvmyozzkvcfea") == "aefcvkzzoymvztxdhudtryndnllzoufvvkrkluziuhw")
    assert(S2.reverse("hobwxjgtnszrqigbcn") == "ncbgiqrzsntgjxwboh")
    assert(S2.reverse("ygedxumamqugrctqnbhkgkmwpcoxxhdyxxwba") == "abwxxydhxxocpwmkgkhbnqtcrguqmamuxdegy")
    assert(S2.reverse("cqteutvzqdfizqgordatlcvvgyxxfzuqqkcluptynnntyqpd") == "dpqytnnnytpulckqquzfxxygvvcltadrogqzifdqzvtuetqc")
    assert(S2.reverse("uvviugdsqdzjaznkdouzisgumtozfcayvgjyaeuwcftxxiooiqzpihfrxusrspeqnmfldlkybmqujemjasipdhjafiiht") == "thiifajhdpisajmejuqmbykldlfmnqepsrsuxrfhipzqiooixxtfcwueayjgvyacfzotmugsizuodknzajzdqsdguivvu")
    assert(S2.reverse("dduszkjonimvtxynxfcauysyxmojowinvlaanytrnpuoiymjrwlnelonjoamsbomindysoebgalnujkjidyyi") == "iyydijkjunlagbeosydnimobsmaojnolenlwrjmyioupnrtynaalvniwojomxysyuacfxnyxtvminojkzsudd")
    assert(S2.reverse("cwwhdlyalrxcpeyzjsnfgwobuwjbvrbwmoljxydrywzyswnmombqfhgtty") == "yttghfqbmomnwsyzwyrdyxjlomwbrvbjwubowgfnsjzyepcxrlayldhwwc")
    assert(S2.reverse("ikqunbfppyzhtamwocodwpglqxsfizkmvbjouzvmtheutlznfuvgnrtzqpjvyqdjrarxsihbiso") == "osibhisxrarjdqyvjpqztrngvufnzltuehtmvzuojbvmkzifsxqlgpwdocowmathzyppfbnuqki")
    assert(S2.reverse("cfhabfsxuxthdtukrvhluqltauloczowmacxazyrllmehdzwwzmt") == "tmzwwzdhemllryzaxcamwozcoluatlqulhvrkutdhtxuxsfbahfc")
    assert(S2.reverse("gspspykvzzcztxcxjxnlusqdelyaujugdctoeqmgymufwwwmwcuewftvvuuituwsmlenbtrhcquolinzgndyqnpcmvcqliphauf") == "fuahpilqcvmcpnqydngznilouqchrtbnelmswutiuuvvtfweucwmwwwfumygmqeotcdgujuayledqsulnxjxcxtzczzvkypspsg")
    assert(S2.reverse("wljwfjnmzfkczfdbukpafwpkxh") == "hxkpwfapkubdfzckfzmnjfwjlw")
    assert(S2.reverse("pcdhwugzvrxuaypamsvcbqrehchljsnxhfbbvffegvrglfnebxumjkxzhyfacjkt") == "tkjcafyhzxkjmuxbenflgrvgeffvbbfhxnsjlhcherqbcvsmapyauxrvzguwhdcp")
    assert(S2.reverse("tiuqtvcjdxaqomaolaliircobrvydctkogjkjcddaerfnkdcfvrzffqsbtlpucnaxfvirulmexkmycvbii") == "iibvcymkxemlurivfxancupltbsqffzrvfcdknfreaddcjkjgoktcdyvrbocriilaloamoqaxdjcvtquit")
    assert(S2.reverse("gxspwrrixfggtpblbnjezkiavp") == "pvaikzejnblbptggfxirrwpsxg")
    assert(S2.reverse("gonaohjoxmwzynbwdsvrnqu") == "uqnrvsdwbnyzwmxojhoanog")
    assert(S2.reverse("jinpwjaspydbmszoptkntfujev") == "vejuftnktpozsmbdypsajwpnij")
    assert(S2.reverse("ogxxeqxihotqslsjdztuxqqsgdvfhyazpzptkmzgeawtmpifwowngpelcdwdabxaflyulvdmlaxynb") == "bnyxalmdvluylfaxbadwdclepgnwowfipmtwaegzmktpzpzayhfvdgsqqxutzdjslsqtohixqexxgo")
    assert(S2.reverse("raokxfqonxgzmqemmilgjqjpsidxrmztyrxgkwjhzkvwptbzryrxzqvlocwbidpizxyzyeiugiibkijfuaiweolvmukxjraaq") == "qaarjxkumvloewiaufjikbiiguieyzyxzipdibwcolvqzxryrzbtpwvkzhjwkgxrytzmrxdispjqjglimmeqmzgxnoqfxkoar")
    assert(S2.reverse("gxwaousbpopisqgukzoudgrfgtidzflxpkhuzfnodbnvgmusvtnuscqdqruhgdagplgqtdfyqklkabwylygjnnkfepckcbrz") == "zrbckcpefknnjgylywbaklkqyfdtqglpgadghurqdqcsuntvsumgvnbdonfzuhkpxlfzditgfrgduozkugqsipopbsuoawxg")
    assert(S2.reverse("neezcxcfuttvpxmmmgfjwnsfmyflussymudtlehxgaddonmdovzutsxytllguelkknktynp") == "pnytknkkleuglltyxstuzvodmnoddagxheltdumyssulfymfsnwjfgmmmxpvttufcxczeen")
    assert(S2.reverse("kuuhxhsiivaphkevjozxrhdrsyxfminzcrviwrlnaxz") == "zxanlrwivrcznimfxysrdhrxzojvekhpaviishxhuuk")
    assert(S2.reverse("yzos") == "sozy")
    assert(S2.reverse("wwtpksssnzleylcxryuylumticnnvmgzcgriyutexbhgjeyssqqgthvimlshrefwfjryiubgffqtpfmsozrdaqxq") == "qxqadrzosmfptqffgbuiyrjfwferhslmivhtgqqssyejghbxetuyirgczgmvnncitmulyuyrxclyelznssskptww")
    assert(S2.reverse("dddoqfksrap") == "parskfqoddd")
    assert(S2.reverse("fznbjtftd") == "dtftjbnzf")
    assert(S2.reverse("ijyqzesqmpziemyxyjksfdtkrisdksdsboygizjewijfsisxlgnklypesreklgqabqnsoqavjcckytmrbfrtpgbsmurzcao") == "oaczrumsbgptrfbrmtykccjvaqosnqbaqglkersepylknglxsisfjiwejzigyobsdskdsirktdfskjyxymeizpmqsezqyji")
    assert(S2.reverse("raxbbmuagr") == "rgaumbbxar")
    assert(S2.reverse("uxqnbubkdneftmfkovcogegofkznyumcztwqyyhawb") == "bwahyyqwtzcmuynzkfogegocvokfmtfendkbubnqxu")
    assert(S2.reverse("musrshwkyuguvapcqwgg") == "ggwqcpavuguykwhsrsum")
    assert(S2.reverse("qtpbumb") == "bmubptq")
  }

  test("Q4"){
    assert(S2.power(1, 1) == 1)
    assert(S2.power(9, 3) == 729)
    assert(S2.power(5, 1) == 5)
    assert(S2.power(6, 4) == 1296)
    assert(S2.power(8, 1) == 8)
    assert(S2.power(5, 9) == 1953125)
    assert(S2.power(10, 5) == 100000)
    assert(S2.power(4, 2) == 16)
    assert(S2.power(6, 7) == 279936)
    assert(S2.power(6, 3) == 216)
    assert(S2.power(8, 8) == 16777216)
    assert(S2.power(3, 1) == 3)
    assert(S2.power(10, 6) == 1000000)
    assert(S2.power(5, 4) == 625)
    assert(S2.power(7, 4) == 2401)
    assert(S2.power(1, 8) == 1)
    assert(S2.power(7, 6) == 117649)
    assert(S2.power(5, 2) == 25)
    assert(S2.power(7, 4) == 2401)
    assert(S2.power(3, 10) == 59049)
    assert(S2.power(1, 9) == 1)
    assert(S2.power(7, 2) == 49)
    assert(S2.power(1, 9) == 1)
    assert(S2.power(4, 7) == 16384)
    assert(S2.power(9, 3) == 729)
    assert(S2.power(5, 1) == 5)
    assert(S2.power(8, 10) == 1073741824)
    assert(S2.power(1, 1) == 1)
    assert(S2.power(9, 2) == 81)
    assert(S2.power(1, 4) == 1)
    assert(S2.power(4, 5) == 1024)
    assert(S2.power(6, 4) == 1296)
    assert(S2.power(2, 10) == 1024)
    assert(S2.power(5, 4) == 625)
    assert(S2.power(5, 6) == 15625)
    assert(S2.power(8, 1) == 8)
    assert(S2.power(3, 4) == 81)
    assert(S2.power(2, 2) == 4)
    assert(S2.power(7, 4) == 2401)
    assert(S2.power(3, 9) == 19683)
    assert(S2.power(7, 8) == 5764801)
    assert(S2.power(4, 9) == 262144)
    assert(S2.power(8, 10) == 1073741824)
    assert(S2.power(8, 6) == 262144)
    assert(S2.power(4, 10) == 1048576)
    assert(S2.power(10, 7) == 10000000)
    assert(S2.power(4, 3) == 64)
    assert(S2.power(3, 7) == 2187)
    assert(S2.power(1, 2) == 1)
    assert(S2.power(1, 4) == 1)
    assert(S2.power(3, 1) == 3)
    assert(S2.power(6, 3) == 216)
    assert(S2.power(1, 9) == 1)
    assert(S2.power(3, 9) == 19683)
    assert(S2.power(4, 10) == 1048576)
    assert(S2.power(7, 8) == 5764801)
    assert(S2.power(5, 4) == 625)
    assert(S2.power(6, 5) == 7776)
    assert(S2.power(7, 2) == 49)
    assert(S2.power(7, 10) == 282475249)
    assert(S2.power(8, 4) == 4096)
    assert(S2.power(1, 7) == 1)
    assert(S2.power(1, 7) == 1)
    assert(S2.power(8, 2) == 64)
    assert(S2.power(3, 3) == 27)
    assert(S2.power(6, 3) == 216)
    assert(S2.power(1, 7) == 1)
    assert(S2.power(4, 9) == 262144)
    assert(S2.power(7, 2) == 49)
    assert(S2.power(1, 1) == 1)
    assert(S2.power(3, 9) == 19683)
    assert(S2.power(8, 1) == 8)
    assert(S2.power(9, 3) == 729)
    assert(S2.power(9, 8) == 43046721)
    assert(S2.power(1, 7) == 1)
    assert(S2.power(7, 9) == 40353607)
    assert(S2.power(1, 8) == 1)
    assert(S2.power(3, 8) == 6561)
    assert(S2.power(8, 7) == 2097152)
    assert(S2.power(1, 5) == 1)
    assert(S2.power(5, 9) == 1953125)
    assert(S2.power(5, 9) == 1953125)
    assert(S2.power(2, 8) == 256)
    assert(S2.power(2, 7) == 128)
    assert(S2.power(4, 5) == 1024)
    assert(S2.power(8, 9) == 134217728)
    assert(S2.power(4, 9) == 262144)
    assert(S2.power(7, 4) == 2401)
    assert(S2.power(1, 4) == 1)
    assert(S2.power(8, 1) == 8)
    assert(S2.power(2, 1) == 2)
    assert(S2.power(7, 10) == 282475249)
    assert(S2.power(3, 7) == 2187)
    assert(S2.power(3, 7) == 2187)
    assert(S2.power(2, 8) == 256)
    assert(S2.power(4, 4) == 256)
    assert(S2.power(8, 7) == 2097152)
    assert(S2.power(9, 7) == 4782969)
    assert(S2.power(6, 3) == 216)
    assert(S2.power(8, 10) == 1073741824)
  }

  test("Q5"){
    assert(S2.contains("ijngnueqjdpwoneqqkupbyflsbrnltkuqghdnpulrjiyb", "pwoneqqkupbyflsbrnltkuqgh") == true)
    assert(S2.contains("qkhnpjdiblnegznwjtyheahvxwfxymffbzrzqgbwctkeaysttdatimed", "tyheahvxwfxymffbzrzqg") == true)
    assert(S2.contains("xuounotjxwpvphoklcxutzhronsyqorq", "oklcxutz") == true)
    assert(S2.contains("cpdiolybifltoflu", "olybifltof") == true)
    assert(S2.contains("trbcvynmxpmfwhmysqrrwzwfkmqdaphsuulidseszqhiqmcsxinv", "mxpmfwhmysqrrwzwfkmqdaphsuuli") == true)
    assert(S2.contains("jnilyyjwbrhazvdxhtzzdyekqplhdchypevgwbagw", "dxhtzzdyekqplhdch") == true)
    assert(S2.contains("ewszgibheqjbguoukirmooagmlkmpe", "qjbguoukirmooa") == true)
    assert(S2.contains("oulormthcioiagcvvaadlfhhyjynugscwgcpnpiutqxazylkqdcknpaxeisyhnaqykafitbffsgpzjgawbw", "gscwgcpnpiutqxazylkqdcknpaxe") == true)
    assert(S2.contains("aeu", "ae") == true)
    assert(S2.contains("fvrhoapsnehrvgvydnynauw", "rhoapsnehrvgvy") == true)
    assert(S2.contains("sqcdto", "cd") == true)
    assert(S2.contains("icmchdwyiwsvxj", "hdwy") == true)
    assert(S2.contains("dxpxrpdwwpmtydxyksttarzjqzfdebgtiwbetuaofhektlqkmrqtpjcxialdnmapib", "sttarzjqzfdebgtiwbetuaofhektlqkmrqtpjcxialdnmap") == true)
    assert(S2.contains("uuagvbiqqpaopyevngakxgzb", "agvbiqqpaopyev") == true)
    assert(S2.contains("ktvtuwgyc", "uwgy") == true)
    assert(S2.contains("hloauigvidogzb", "loauigvid") == true)
    assert(S2.contains("hdehonqrbqqmacvdjbvqzipbnbnlpgayvdurlijnwkittyljcgpprypfmjkgtynmnhmljkfxogne", "lpgayvdurlijnwkittyljc") == true)
    assert(S2.contains("xjfhyypnbjjqrtaktujpjcqctxhrjwhwemfahsmjzrobpubuilurlandfiivljvwpreaoclgmxzbbnvjjsv", "taktujpjcqctxhrjwhwemfahsmjzrobpubuilur") == true)
    assert(S2.contains("ioprxzhmvzqiutsrmptdnjnxohfdjtwoqlfpcpcqoludzjzrblyxgfsuwalsvk", "mvzqiutsrmptdnjnxohfdjtwoqlfpcpcqoludzjzrblyxgfsuw") == true)
    assert(S2.contains("uytjxalgkshnkeuwdwyybgdbbtuiyptkgxupuwcavfwqrhrihaltrvzkrk", "wdwyybgdbbtuiyptkgxupuwcavfwqrhrihalt") == true)
    assert(S2.contains("asjovmzuvzhclzdcltovawjsihixpxgnmrcaqrgpgyalzppmmmlowqkvswksmk", "xgnmr") == true)
    assert(S2.contains("xbdmygsbukddczsoltszhtckzzmrmkkutgtodb", "kddczsoltszhtckzzmrmkkutgtod") == true)
    assert(S2.contains("ywcwgkmdxrymhvp", "wcwgkmdxry") == true)
    assert(S2.contains("snoumrjtvjiscweghzmdmzklrlbalexfernqxiqlaabr", "cweghzmdmzklrlbalexfernqxiqla") == true)
    assert(S2.contains("vcxmgjbsnxluokcbhosrwdsmliqicpiaeuagxiofoenabyhbyvrxgtutuqmxyzdehommaryubzmqjuwlcjwohmkxsp", "aeuagxiofoenabyhbyvrxgtutuqmxyzdeh") == true)
    assert(S2.contains("bmrlkvhqfkiiyxzhavgaxqkfsnpqovjylwzfxboacxvyirahkmfpjqje", "axqkfsnpqovjylwzfxbo") == true)
    assert(S2.contains("slhrvtqimnxntojktvwcqsxpndvpstjwbcnhnuamqexfzkjjamnikpfhnzxgbqzrfqzafeyoirvwc", "dvpstjwbcnhnuamqexfzkjjamnikpfhnzxgbqzrfqzafeyoi") == true)
    assert(S2.contains("izlerruysujuwlfyktiwikomaylrgivkqainmgra", "ujuwlfyktiwikomaylrgivkqain") == true)
    assert(S2.contains("vcjvqjrszhvxpyfrmohnkloaizvumgnmnakggwetbt", "mohnkloaizvumgnmnakggwet") == true)
    assert(S2.contains("kgyhdaifpweyixjwvhduonjzsjeothsqzbpzbmspyodjbsugcvjgnnnjetrnxgenbdvevaaxcumgqzkqoodncdfnatwrfkdj", "bmspyodjbsugcvjgnnn") == true)
    assert(S2.contains("mmzbmudlynldoidccztpxhsbvnobvcllnfopqydklruyenbcfozwjxaqarjqgpapkftuxvmm", "mudlynldoidccztpxhsbvnobvcllnfopqydklruyenbcfozwj") == true)
    assert(S2.contains("vimlvxhsyclwfmwgjjnvdcopixatlupqqfzloeajiyulptuqmstwtdjuuqzgpakajdcvfoixzvwwjknpenckatb", "syclwfmwgjjnvdcopixatlupqqfzloeajiyulptuqms") == true)
    assert(S2.contains("ahslpoimnlrgiaxvrtkazibnwfizirjcvulneuwkokezhamsvvbaghtldwthgtsvjhpqvkvfjmwxfwvpuaibdwaw", "jcvulneuwkokezhamsvvbaghtldwthgtsvjhpqvkvfjmw") == true)
    assert(S2.contains("xsetqtihxifnkwlkffiimqanjynsliboircjtrfknksxdnwkenpxeddpbbxyaolwzfn", "njynsliboircjtrfknksxdnwk") == true)
    assert(S2.contains("rnqhspqdrearej", "dr") == true)
    assert(S2.contains("tpcgwsmjdtmslvhaauautwyneqapzfr", "wsmjdtmslvha") == true)
    assert(S2.contains("oyahunyfwif", "yahunyfw") == true)
    assert(S2.contains("rkjqpggxfdkhohmxnfseiwrpfaemdziaxkkhegspwjzzrgikigxxhywhv", "pggxfdkhohmxnfseiwrpfaemdziaxkkhegspwjzzr") == true)
    assert(S2.contains("shxtwphhdnugwsrwajqsdur", "nugwsrwajq") == true)
    assert(S2.contains("shczlyczfpmoqqmscfzospydfu", "fpmoqq") == true)
    assert(S2.contains("ictbn", "t") == true)
    assert(S2.contains("xdgtmqkvcrmtmjhgkijuowlmtawhrcrdqvgsnhyzbuxfavvuairyopunexkhkgisjjvyssaegkkuzejazsytoojqeqw", "kvcrmtmjhgkijuowlmtawhrcrdqvgsnhyzbuxfavvuairyopunexkhkgisjjvyssaegkkuzejazsy") == true)
    assert(S2.contains("cdkdqmltbcgxajxpcfclhrduchgctdxtjkqxwqlzevosatrwfsaqvwsiluuwy", "mltbcgxajxpcfclhrduchgctdxtjkqxwqlzevosatrwfsaqvws") == true)
    assert(S2.contains("dxvxqeiixjysw", "xvxqeiixjy") == true)
    assert(S2.contains("nlyuwfyclnkwopvmutetpdooqchwnrdtesujjpxmojnggmffsfcotqkmlhovbeivcxusmwoalsjwnjadfe", "pxmojnggmffsfcotqkmlhovbei") == true)
    assert(S2.contains("bihfxlhzodffvlqhwacitekvtukpdwkonyqgiwsijbhwruuarkhsxcfwwwablbwdblkryoy", "hzodffvlqhwacitekvtukpdwkonyqgiwsijbhwruuarkhsxcfww") == true)
    assert(S2.contains("saypgsqrhhriwmcdzolntwsrqunpfnpirzleplptoxgyacpdlzafyttuzjmzysgigazfxsofjexfpbztiqsjcaegcs", "fnpirzleplptoxgyacpdlzafyttuzjmzysgigazfxsofjexfpbzt") == true)
    assert(S2.contains("qvckqftrszglwqewcvqjarmaxwxudszdqklokbjtnbuyiynirazktoxgsmbrgoqxjdf", "rmaxwxudszdqklokb") == true)
    assert(S2.contains("pczxdlbeuwkmaizsigphugpljyjfgzlrbvfilasqronizdkafiwtspmnmzayovwqwqgjvtmdlpmsmqyvautzenpr", "euwkmaizsigphugpljyjfgzlrbvfilasqronizdkafiwtspmnmzayovwqwqgjvtmdlpmsmq") == true)
    assert(S2.contains("cnxnbjdhvwoflfjquppsxxxidtsxcxcemqzabujusdb", "quppsxxxidtsxcxcem") == true)
    assert(S2.contains("cdthxcxsfcyjzjrgtqeweifpbvdmwjnjfurwamenuqiurrfwzxrcbifyrcxfnoubdekqqeclapjlpzymokvwac", "hxcxsfcyjzjrgtNqeweifpbvdmwjnjfurwamenuqiur") == false)
    assert(S2.contains("xclbvoebfbzdicsgimqfnqcgstafpivitijujzp", "clbvoebfbzdicsgimqfnQqcg") == false)
    assert(S2.contains("yygpksftzfdldzmtgilnckgksdfobwzlhdlbgcbuwkp", "kgksdfobwzlhdlGbgcbuw") == false)
    assert(S2.contains("wtwvbzbntguxvdfafttpfcdmiulgmdmmipapmmnxkmmmeumbssvrouano", "wvbzbntguxvdfafttpfcdmiulgmdmmipapmmnOxk") == false)
    assert(S2.contains("vbwenqukeutscuvlmceidzyafcemokxugv", "bwenqukeutscIuvlmceidzyafcemo") == false)
    assert(S2.contains("utmypyqtofniizckxrxzfszddricjilslnbzuqqkrxmiyyctnkhyupyq", "rxzfszddricjilslnbQzuqqkrxm") == false)
    assert(S2.contains("mihrqqltbhtcfcuvfutuycrupgzdoagltfcfpftcttnxnewahnlgstfzhgqowmfjbpsizlumymegou", "lRtfcfpftcttnxnewahnlgstfzhgqow") == false)
    assert(S2.contains("xvabahjpwprmznnfowtpqeuuefjnylmhil", "bahjpwprmznnfowtpMqeuuef") == false)
    assert(S2.contains("hqzjxmxgdqeuhvk", "zjxmxgdqVe") == false)
    assert(S2.contains("ztramcnrupbljaivyccpflzvwffviygupdlxmgaoigivlftpuiqcijvdxbtxwweeudcmkv", "cpflzvwffviyVgupdlxm") == false)
    assert(S2.contains("cudnplnqvmchilmgyuvzskdzdtdxtbyalepszzmctqoredmebsmlrymtrqhixqurdplhlktclqhqutigjbt", "lnqvmchilmgyuvzskdzdtdxtbyalepszzmctqoredmebsmlrymtrqhixqurdEplh") == false)
    assert(S2.contains("hxkahaxyecnvrahpnumzdldapduidjwlcghdaqswkxfurlwthgqrtzsqfhctt", "cnvrahpnumzdldapduiMdjwlcghd") == false)
    assert(S2.contains("ilabbjdjokodpmnmcifiupmhhapulfxveyzpzfpgkiazchkwwnmewajccqtespqintolpx", "odpmnmcifiupmhhapulfxveyzpzfpgkiazchkAwwnmewajc") == false)
    assert(S2.contains("abdxbtrfscmnojivwqppvqdgdiiyrwxoseaqrgmalnfbwkxlcoymilvcvrbf", "vqdgdiiyrwxosKeaqrg") == false)
    assert(S2.contains("hbiqsmpuegxebfjmkhwjfkhwyunjgczjhivmakbgtqwmbvmmjwcvmahbipddropgqnzxbapetfwmcwdgdubwv", "bfjmkhwjSfkhwyunjgczjhivmakbgtqwmbvmmjwcvmahbipddropgqnzx") == false)
    assert(S2.contains("kpcqdokxcshajhyunuuvymggkkqsjdbmawmvsqfixlpdvlfnfjqegyglemzjleoyjvonog", "uvymggkkqsjdbmawmvsqfixlpdvlfInfjqegyglemzjleoyjv") == false)
    assert(S2.contains("atwbynmyysdnudvopwqmrtrppsyeernlpsndgzmrewesozqervodraeewldtqkkcgorzbdmuhotizdtzhnikd", "twbynmyysdnudvopwqmrtrppsyeernlpsndgzmrewesozqervodrQ") == false)
    assert(S2.contains("qxnhapfgpwpbvyx", "xnAhapfgpwp") == false)
    assert(S2.contains("mhecugdph", "mhecKu") == false)
    assert(S2.contains("wdwlhhgusowrfxjgbbsimqzpydbtccndunyzouysklhcyxnlewvrdlfkxxcgvhmzjgoxpxkywemqzwzdnasqyjcpuicw", "klhcyxnlewvrZ") == false)
    assert(S2.contains("lfwpxaklfwlnkxvffejpswcjojosehrpbfygtusrsepzsgyiurzustyhjsyqcciuzuuvxeafuhwzzhtf", "nkxvffejpswcjojosehrpbfygtusrsepzsgyiurzustyhjRsyqcciuzu") == false)
    assert(S2.contains("gwbbuhfklnxtoftylvqudifvxiohgypxcsuerxmm", "difvOxiohgypxcsuerx") == false)
    assert(S2.contains("rpzjrldrwinhcjdbaxbjii", "hcjdbaxW") == false)
    assert(S2.contains("qfcjwarsnaaosjuwktlpxvgweqwtukmeqdcfsiewmedmszngbu", "aosjuwktlpxvgweqwtukmeqdXcf") == false)
    assert(S2.contains("blhdnubvpugwwujtawfhnqzlvsbrutdxjhzgnmcvsmdelefsnhuisynhowrtge", "brutdxjhzgnmcvsmdelefsnH") == false)
    assert(S2.contains("wtuocygpyhlrlqdvvcjiacclbylcpqkoijnsnjtusyq", "dvvcjiacclbylScp") == false)
    assert(S2.contains("yavgnykvvfudnutzxkpizeuptulzkyeaaxxguitjdcpjytpblzxntbttxoybgrtoavgkgimr", "kpizeuptulzkyeaaxxguitPjdcpjytpb") == false)
    assert(S2.contains("zavcbtnznqcimwjyzjvuzmbwvzaafhypsamzyhsvzkmjgrrfcchvcfgrsoexlamyibpzpxgpaayeqtrsslexqyxhx", "amzyhsvzkmjgrrfcchVvcfgrsoexlamyi") == false)
    assert(S2.contains("uvkhwymdolcqtyopbscgbdtvhzuxrypogooleoxwfhjut", "uvkhOwymdolcqtyopbscgbdt") == false)
    assert(S2.contains("ajjmjlvshzpcbciarwenlcfgvxerixcdz", "jlXvshzpcbciarw") == false)
    assert(S2.contains("futpqqlsgnfwuwplnkfamvasu", "wuwplnkfaPmva") == false)
    assert(S2.contains("bsjywpvmhvokmnxohdghgcxtisxgiwbhrecxuuhmvjdvzegefqdvcysjgdnwxubcmotqw", "hvokmnxohdghgcxtisxgiwbhreYcxuuhmvjdvzegefqdvcy") == false)
    assert(S2.contains("jhshnoamncnkygisihwvfwvdfcyebsfmmhwcjnrhzjwfvwfcqvlngvbnxiczrselfukiximi", "cSjnr") == false)
    assert(S2.contains("jfgldiyrxmbontejftwiytyxwyjavmbquimzubgtjifoelzjoia", "wiytyxwyjavmbHquimzubgtjifoelzj") == false)
    assert(S2.contains("gqgugqobeboprtxtndpymkhmlxijtzdjjivrrvhsimhchrxnvosnvsiasefgsppdker", "mkhmlxijtzdjjOivrrvhs") == false)
    assert(S2.contains("ydzudnnvdykvwchzxctixthutpoxgy", "nvdykUvwchzxctixt") == false)
    assert(S2.contains("mqxslgektdubsloayxlxbbhptidtrwnivnxspeikzmdpzftlwlzwqkmdscdwajmtaapisaiiawluofjpcbhnmecmvtepr", "lxbFbhptidtrwnivnxspeikzmdpzftlw") == false)
    assert(S2.contains("kkrwfcmbnbvhkvxlkaxoqokcnkoyzajruwhiulcadahd", "xoqJokcnkoyzajruwh") == false)
    assert(S2.contains("tcytbbepwcyykulacupvkx", "yySkul") == false)
    assert(S2.contains("twnrwryprrypjkxbvxmcvxi", "prrypjkQxb") == false)
    assert(S2.contains("wqnjkkz", "jX") == false)
    assert(S2.contains("mbgteuaqhuxuknskzimuh", "gteuaqPhuxuk") == false)
    assert(S2.contains("nfd", "fI") == false)
    assert(S2.contains("anevpograhfocwvwoys", "grahfoIcwv") == false)
    assert(S2.contains("ygvnjymlexnmrohwsvywjlupigyugupyxci", "nmrohwsvyA") == false)
    assert(S2.contains("twhtigbyxmtrwlciuanqryvwvzhlmdiwsamobkdfwdkxftzlejyvzjeuzxienjdlf", "twhtigbZyxmtrwlciuanqryvwvzhlmdiwsamobkdfwdkx") == false)
    assert(S2.contains("cssqgssptdzs", "Qcssqgssp") == false)
    assert(S2.contains("optuxrzqieznvpmlribkhrnxazhtfyercobixbteeelxwdxwvdsaqxoetoxolusrwtblcjdanv", "tuxrzqieznvpmlribkhrnxazhtfyercobixbteeelZxwdxwv") == false)
    assert(S2.contains("jepixkvs", "jepQixk") == false)
    assert(S2.contains("pxwjotfpvfasapyxxliwsjeyapvvjaxyvzirctlobhevbklwyyjwvpf", "xxliwsjeyapvvjI") == false)
  }

  test("Q6"){
    assert(S2.reverseEachN("urjmjjscrugovtdfzwctspuwjsrbirfdfiykdl", 15) == "dtvogurcsjjmjruribrsjwupstcwzfldkyifdf")
    assert(S2.reverseEachN("eskhcndshwmhtaeduycehrbfcevizgosvxkoqnjviqgakymjjxmsykrnkckxvmhmmqfewmcomkehzcatabzfi", 23) == "brhecyudeathmwhsdnchkseykagqivjnqokxvsogzivecfwefqmmhmvxkcknrkysmxjjmifzbataczhekmocm")
    assert(S2.reverseEachN("fhoyuxumymhfqcdgnlerbalhbybugvksi", 23) == "labrelngdcqfhmymuxuyohfiskvgubybh")
    assert(S2.reverseEachN("rfhakgllqetdvdjgauwjrtzpegdsn", 13) == "vdteqllgkahfrgepztrjwuagjdnsd")
    assert(S2.reverseEachN("ibfxecsoutalvzzsbcscs", 14) == "zvlatuoscexfbiscscbsz")
    assert(S2.reverseEachN("xpw", 2) == "pxw")
    assert(S2.reverseEachN("ehlzxuyukpcidb", 13) == "dicpkuyuxzlheb")
    assert(S2.reverseEachN("mhfvyontdkhymlfriksmtgauwoubcrhrrotlaalgmq", 9) == "dtnoyvfhmkirflmyhkuowuagtmsltorrhrcbqmglaa")
    assert(S2.reverseEachN("uouovfyryieepkxouxfa", 1) == "uouovfyryieepkxouxfa")
    assert(S2.reverseEachN("dvulqonpiymwhnxqjrdduvqdckammqgfclqojoc", 16) == "qxnhwmyipnoqluvdfgqmmakcdqvuddrjcojoqlc")
    assert(S2.reverseEachN("lmayormwyrzkwcvvmcrezpjmbmeysgvcde", 1) == "lmayormwyrzkwcvvmcrezpjmbmeysgvcde")
    assert(S2.reverseEachN("sjtiuymgdahshcmgfkjmnnghpzrmpdilcqsfhkurndlcwgkhb", 35) == "sqclidpmrzphgnnmjkfgmchshadgmyuitjsbhkgwcldnrukhf")
    assert(S2.reverseEachN("khepwtejcjopihuavuf", 19) == "fuvauhipojcjetwpehk")
    assert(S2.reverseEachN("hjigovvhinugebeerapcbynjfsyztfsieyyyajxkodjicxifpamnxwqvehgaqtrvttlahrrvwcplganuyocpridaxgqvhjtfg", 70) == "rhalttvrtqaghevqwxnmapfixcijdokxjayyyeisftzysfjnybcpareebegunihvvogijhgftjhvqgxadirpcoyunaglpcwvr")
    assert(S2.reverseEachN("qnpekopbhchtmqxhdtmfrtvgjjdmojofawyyhyzhbykkhjzecreljjlwdr", 18) == "tdhxqmthchbpokepnqyywafojomdjjgvtrfmjjlercezjhkkybhzyhrdwl")
    assert(S2.reverseEachN("wvctmlqrwtqlwxmndbwoaqndfatjsinqgixpnbuvrktiezhfhgnbbvyraibfatvqrruypftspvwdcqmbqnu", 9) == "wrqlmtcvwbdnmxwlqttafdnqaowpxigqnisjeitkrvubnvbbnghfhzvtafbiarystfpyurrqqbmqcdwvpun")
    assert(S2.reverseEachN("ctfamtqbshtdvpzypkarlrbngfbkqrziwqelqzgwmbmqfipzoltnuikpyysimjzpqpybckbddzurqqaljjefw", 47) == "pifqmbmwgzqleqwizrqkbfgnbrlrakpyzpvdthsbqtmaftcwfejjlaqqruzddbkcbypqpzjmisyypkiuntloz")
    assert(S2.reverseEachN("ryygxmougwnteangpefjazypecmawwyeiefcpowmhhehrmzvhwsoolnnytafvzizclznyh", 64) == "zizvfatynnlooswhvzmrhehhmwopcfeieywwamcepyzajfepgnaetnwguomxgyyrhynzlc")
    assert(S2.reverseEachN("thqclpjysmksfhidkesxvibhxeqgbqrctuhlajholnzarjbwbrqougxkohfqvkpmoutlvqgyiqfcusk", 24) == "hbivxsekdihfskmsyjplcqhtwbjraznlohjalhutcrqbgqexygqvltuompkvqfhokxguoqrbksucfqi")
    assert(S2.reverseEachN("nlzplostymsbnlqkijzilsrosipqcvoywqlmztinufcrcizfyvwqafmiqcnwcinldsxvcxouhzbzpbwytxtlaztbtibhzor", 79) == "wbpzbzhuoxcvxsdlnicwncqimfaqwvyfzicrcfunitzmlqwyovcqpisorslizjikqlnbsmytsolpzlnrozhbitbtzaltxty")
    assert(S2.reverseEachN("cmoomgourukwuemeebleknodkfcotgwjheuedik", 15) == "meuwkuruogmoomcgtocfkdonkelbeekideuehjw")
    assert(S2.reverseEachN("ktwnhddwxqnuuwbqbfldlmgr", 19) == "lfbqbwuunqxwddhnwtkrgmld")
    assert(S2.reverseEachN("gfdrhzozlgossrvcmtipmrnpdyddmanufclgqahfeykvcopgurfpqeybqhuieujic", 47) == "pocvkyefhaqglcfunamddydpnrmpitmcvrssoglzozhrdfgcijueiuhqbyeqpfrug")
    assert(S2.reverseEachN("bkkdqajmcxibjwyngozghzkubjzlaxvjkupqhcahlurzugjjtaqwtatdomt", 21) == "hgzognywjbixcmjaqdkkbulhachqpukjvxalzjbukztmodtatwqatjjguzr")
    assert(S2.reverseEachN("gjogmvafuvhqmlvpaavapdtircoqfucujxdaueadhmdkhauwihhfhvhdhjdodayhopmmt", 43) == "dmhdaeuadxjucufqocritdpavaapvlmqhvufavmgojgtmmpohyadodjhdhvhfhhiwuahk")
    assert(S2.reverseEachN("bhlosjqkylmretvzlxrspkfwfiapnfexnzphkvogwrmyejdmgekwu", 29) == "npaifwfkpsrxlzvtermlykqjsolhbuwkegmdjeymrwgovkhpznxef")
    assert(S2.reverseEachN("olwoflcohmkfgldxzruawavdrmkdsbjsqtqnruommknbkpa", 37) == "rnqtqsjbsdkmrdvawaurzxdlgfkmhoclfowloapkbnkmmou")
    assert(S2.reverseEachN("jbngtrgsvnutfdxlycjsgtmhkttibmniekeefungmyedvuucwqheanbu", 37) == "feekeinmbittkhmtgsjcylxdftunvsgrtgnbjubnaehqwcuuvdeymgnu")
    assert(S2.reverseEachN("evrqferczwxulotesetcelfifijusqvtogcbznxytwrdepxvbbmoazarajzkfbsbzzvwiosdbbtusvpwgrpolzmodkmif", 86) == "zloprgwpvsutbbdsoiwvzzbsbfkzjarazaombbvxpedrwtyxnzbcgotvqsujififlectesetoluxwzcrefqrvefimkdom")
    assert(S2.reverseEachN("dbgcbvglfuzaazfcrujbmsygqsoyzxiieiepmtz", 35) == "eieiixzyosqgysmbjurcfzaazuflgvbcgbdztmp")
    assert(S2.reverseEachN("pomxblaxcyzmsfqxjcwwqimqvndkiirjgihobffkwjuixqxmcyoyacwwjkbgoudvrklsnxhhizqjlpkludhxdjlao", 27) == "dnvqmiqwwcjxqfsmzycxalbxmopcayoycmxqxiujwkffbohigjriikulkpljqzihhxnslkrvduogbkjwwoaljdxhd")
    assert(S2.reverseEachN("ngyhjrrqqsmkmyowkjwhuxithheuajitkbvomiwsjxkuvjvxppqgyfda", 34) == "bktijauehhtixuhwjkwoymkmsqqrrjhygnadfygqppxvjvukxjswimov")
    assert(S2.reverseEachN("lfgdsnknzlgwnaibehoftzuivlryjjwfoepvxcbxjeslelrro", 14) == "anwglznknsdgflyrlviuztfohebiejxbcxvpeofwjjorrlels")
    assert(S2.reverseEachN("zdhasqkimfqkehzcxcestcfled", 1) == "zdhasqkimfqkehzcxcestcfled")
    assert(S2.reverseEachN("niscugmojpdakihomquxhvfajqwbnrveeazimhkpeydmvxasmftdwngkfiithqrussznt", 56) == "kgnwdtfmsaxvmdyepkhmizaeevrnbwqjafvhxuqmohikadpjomgucsintnzssurqhtiif")
    assert(S2.reverseEachN("gfikelcimlcpnqhhhapxzrirwlvnnxkdgm", 26) == "lwrirzxpahhhqnpclmiclekifgmgdkxnnv")
    assert(S2.reverseEachN("cdrolpwxxmdogpepontdhsmcjtndnlj", 25) == "jcmshdtnopepgodmxxwplordcjlndnt")
    assert(S2.reverseEachN("dklfjquamnmpitedzisfsdropi", 5) == "jflkdnmauqetipmfsizdpordsi")
    assert(S2.reverseEachN("svcdvnbcebzosgpldmipcqtgykcmf", 15) == "pgsozbecbnvdcvsfmckygtqcpimdl")
    assert(S2.reverseEachN("kowdiigsdbnmrpzkwzzxneoizhedyw", 1) == "kowdiigsdbnmrpzkwzzxneoizhedyw")
    assert(S2.reverseEachN("ytn", 3) == "nty")
    assert(S2.reverseEachN("tnazikwihgnzzwitgyrhhrolxppsjggtvbcbmilnjgpwwbhexsl", 13) == "zznghiwkizantpxlorhhrygtiwlimbcbvtggjsplsxehbwwpgjn")
    assert(S2.reverseEachN("lahdobxkwgcltmpaybirsxcnyquleffegjyuofspyzkptluppgtuzsnrdnnnzclsogefbtdvhgczqxoeiwphdvlrottyjzgpjpxh", 32) == "effeluqyncxsribyapmtlcgwkxbodhalslcznnndrnszutgppultpkzypsfouyjgpgzjyttorlvdhpwieoxqzcghvdtbfegohxpj")
    assert(S2.reverseEachN("refugaaxviah", 9) == "vxaaguferhai")
    assert(S2.reverseEachN("ppfl", 4) == "lfpp")
    assert(S2.reverseEachN("eyzfzdpidwhykzqmtxbriuludnikvgczvkokdkzwonrafkndynmffnclk", 8) == "ipdzfzyemqzkyhwduluirbxtzcgvkindwzkdkokvdnkfarnolcnffmnyk")
    assert(S2.reverseEachN("putwwatetbogkuipvmjizgkzipghwghcwzftjynbmgxhujnzmfigcdvzngxoeeygpwxrevzwewfmxmlkbivwvwa", 34) == "zwchgwhgpizkgzijmvpiukgobtetawwtuprxwpgyeeoxgnzvdcgifmznjuhxgmbnyjtfawvwvibklmxmfwewzve")
    assert(S2.reverseEachN("rgobrbdhwtekeilhunzidvrg", 12) == "ketwhdbrbogrgrvdiznuhlie")
    assert(S2.reverseEachN("ermwuazlovtyzcqydhjtydyxsjajflgxauouf", 14) == "czytvolzauwmrejajsxydytjhdyqfuouaxglf")
    assert(S2.reverseEachN("gchstqiziqtzfldicoypymcfnbfhljiptwapg", 20) == "pyocidlfztqiziqtshcggpawtpijlhfbnfcmy")
    assert(S2.reverseEachN("bgpwokalcseqmuxhtzcytjnnybqbudumsgwxekegptcqhsiwk", 41) == "pgekexwgsmudubqbynnjtyczthxumqesclakowpgbkwishqct")
    assert(S2.reverseEachN("klnzophgaiikhrky", 2) == "lkznpoghiakirhyk")
    assert(S2.reverseEachN("arxifwfbmudwfxkfijflgpoayjfrkbrqbacypgotxkiyzkosbxjztsawxasqlgzodliowdzhfjxl", 62) == "glqsaxwastzjxbsokzyikxtogpycabqrbkrfjyaopglfjifkxfwdumbfwfixralxjfhzdwoildoz")
    assert(S2.reverseEachN("lekqonijcongbsgpshlgkxpkommxrtnxeehgyzvcitjexclsmzvbcswnvtfgzdxvcvhhk", 52) == "bvzmslcxejticvzygheexntrxmmokpxkglhspgsbgnocjinoqkelkhhvcvxdzgftvnwsc")
    assert(S2.reverseEachN("mzmzxiywzzrmunlrncawkquczhnpblrbgxbfnmosrreyfae", 16) == "rlnumrzzwyixzmzmbrlbpnhzcuqkwacneafyerrsomnfbxg")
    assert(S2.reverseEachN("rwfzmgalmmmtilvudljdkwfpaxguwcvezhplrozvdcibwzpzoaaerxbgmozeanvctcdfxckhojl", 51) == "aaozpzwbicdvzorlphzevcwugxapfwkdjlduvlitmmmlagmzfwrljohkcxfdctcvnaezomgbxre")
    assert(S2.reverseEachN("cyhwidpxhjzofdu", 2) == "ycwhdixpjhozdfu")
    assert(S2.reverseEachN("mywowgpbiaorubxoreixnllrocofzth", 6) == "gwowymroaibperoxburllnxitzfocoh")
    assert(S2.reverseEachN("hrurfvzbucmepclgtxrxygcgfgqgzljpiwcbwdqrx", 9) == "ubzvfrurhxtglcpemcqgfgcgyxrbcwipjlzgxrqdw")
    assert(S2.reverseEachN("cyhoncrixozaerexkadyglwvvmzjveuwmgxkoqvm", 14) == "reazoxircnohycjzmvvwlgydakxemvqokxgmwuev")
    assert(S2.reverseEachN("kbjvlsalyweruce", 1) == "kbjvlsalyweruce")
    assert(S2.reverseEachN("cfbzxkuldhvcsungshspqrpkjiulycatoqcrrgsmkshfnvkmnwkwrzrnqaeddgdnelyapcjcpggwgrndhjikshnxqxq", 30) == "cyluijkprqpshsgnuscvhdlukxzbfcdeaqnrzrwkwnmkvnfhskmsgrrcqotaxqxnhskijhdnrgwggpcjcpaylendgdq")
    assert(S2.reverseEachN("spbhqyysheffbgudifuyhvblvnpktxsapwglwcinfwwvgxrikjfcakmbzgqnxkppnlbluwnfaeqgyrufzlharpylwfydnnim", 70) == "wulblnppkxnqgzbmkacfjkirxgvwwfnicwlgwpasxtkpnvlbvhyufidugbffehsyyqhbpsminndyfwlyprahlzfurygqeafn")
    assert(S2.reverseEachN("pghnjlkfjxw", 7) == "kljnhgpwxjf")
    assert(S2.reverseEachN("bhkdbkiskouar", 3) == "khbkbdksiauor")
    assert(S2.reverseEachN("vsifxxbnfwskllxwqownerbgpqqeqjsdjaf", 24) == "gbrenwoqwxllkswfnbxxfisvfajdsjqeqqp")
    assert(S2.reverseEachN("bywearkwnerhlwyiujjpizofpsfneskaznvpvhodzfbjkszuthvehzvsulszysxomsdjpnvhnlsyhzoxskcme", 16) == "iywlhrenwkraewybaksenfspfozipjjuuzskjbfzdohvpvnzoxsyzslusvzhevhtxozhyslnhvnpjdsmemcks")
    assert(S2.reverseEachN("qlyxctupiapubgorphaqqjcqkrlxzupbamlzhcnvzxfhjntcjgpdwzcxzfdupzeowsknrnwdylezmhdzumteirjuielltmxnkfr", 69) == "rnkswoezpudfzxczwdpgjctnjhfxzvnchzlmabpuzxlrkqcjqqahprogbupaiputcxylqrfknxmtlleiujrietmuzdhmzelydwn")
    assert(S2.reverseEachN("xbwfglmdxaogbpjmxhwpzqcanysqebmgiqcobfmbxitootuagfcfexuldpnxwpdeqzzkngl", 7) == "mlgfwbxpbgoaxdzpwhxmjqsynacqcqigmbeixbmfbogautootluxefcfdpwxnpdgnkzzqel")
    assert(S2.reverseEachN("kdqpmltlshbgugtwvwviodbqmzricrkzyzkd", 11) == "bhsltlmpqdkdoivwvwtgugyzkrcirzmqbdkz")
    assert(S2.reverseEachN("ewndjfiugrcusykhnwwohqq", 22) == "qhowwnhkysucrguifjdnweq")
    assert(S2.reverseEachN("ylvontujybbeedudhbbxfahpejbipcdfdvylspxzuuzyaekantdbmzvcwsdyawusdplxtxxqrga", 54) == "zmbdtnakeayzuuzxpslyvdfdcpibjephafxbbhdudeebbyjutnovlyagrqxxtxlpdsuwaydswcv")
    assert(S2.reverseEachN("rdudcibnoh", 6) == "icdudrhonb")
    assert(S2.reverseEachN("yqahfrfqxprqudh", 1) == "yqahfrfqxprqudh")
    assert(S2.reverseEachN("wsngprayeyrewabdyvdvftvqykqytnohjfinqcjwxtoqbuf", 36) == "nifjhontyqkyqvtfvdvydbaweryeyarpgnswfubqotxwjcq")
    assert(S2.reverseEachN("tyolduzpzumggdvoalto", 14) == "dggmuzpzudloytotlaov")
    assert(S2.reverseEachN("vtqkcbntcokmhqlxidfblpjionrwckwlconeyvvstivsqjpoqfdzindfxwiwwgzvsypmumanjtudxtybezlttuuhetrfkzpxcmyd", 80) == "bytxdutjnamumpysvzgwwiwxfdnizdfqopjqsvitsvvyenoclwkcwrnoijplbfdixlqhmkoctnbckqtvdymcxpzkfrtehuuttlze")
    assert(S2.reverseEachN("yozmidscyyywktafzrfjpossxqimgjlanymkxzzfltheffpwmfngrjwoutdwumlzmsiscmovkenotufmrmopfkqnnlsdtvav", 41) == "lfzzxkmynaljgmiqxssopjfrzfatkwyyycsdimzoymrmfutonekvomcsismzlmuwdtuowjrgnfmwpffehtvavtdslnnqkfpo")
    assert(S2.reverseEachN("jotcovvxjd", 5) == "octojdjxvv")
    assert(S2.reverseEachN("ndnxebayskaznqufhyimvwpgjcgenymqyelezlpspzrcbwreyogrleqvadsecjrljonprvxwezhdzyeoedtatnfja", 47) == "rwbcrzpsplzeleyqmynegcjgpwvmiyhfuqnzaksyabexndnajfntatdeoeyzdhzewxvrpnojlrjcesdavqelrgoye")
    assert(S2.reverseEachN("dgrgsozgypkjknvapmssazzsbqoazonnoxwmqmmayqxukjbqywfebaojcmjztyqagldaxrtwjeoetqpfhbrtpn", 44) == "uxqyammqmwxonnozaoqbszzassmpavnkjkpygzosgrgdnptrbhfpqteoejwtrxadlgaqytzjmcjoabefwyqbjk")
    assert(S2.reverseEachN("ecftzkzvpyfsbbpjkblzotuuadaubgjixthacjbk", 3) == "fcekztpvzsfypbbbkjozluutadagbuxijahtbjck")
    assert(S2.reverseEachN("upqykzmqlwcckxgaxhphjjjujmzvqywhgwkffgbrataxexgmofqvtyjlnlmnbezlclcldize", 25) == "jujjjhphxagxkccwlqmzkyqpufomgxexatarbgffkwghwyqvzmezidlclclzebnmlnljytvq")
    assert(S2.reverseEachN("dwjpvqckksldkejbnvkmcrtegiasukfrghgihyosftafhyogkjjbnqaqwxs", 6) == "qvpjwddlskkcvnbjeketrcmkkusaigighgrftfsoyhgoyhfaqnbjjksxwqa")
    assert(S2.reverseEachN("rvussthradwajtypoxyezxcdtwxrqppfqlczhonxdivpnxslamegvnhhkullyjmdsbzitaqjvvbwctphl", 75) == "bvvjqatizbsdmjyllukhhnvgemalsxnpvidxnohzclqfppqrxwtdcxzeyxopytjawdarhtssuvrlhptcw")
    assert(S2.reverseEachN("biinaasgbopwbpvnrpqoagyxkitbmtixzgzsowpvzodlvvnbfevybukzxxywbbeoymopgeilpbvh", 36) == "szgzxitmbtikxygaoqprnvpbwpobgsaaniibliegpomyoebbwyxxzkubyvefbnvvldozvpwohvbp")
    assert(S2.reverseEachN("oqvsyakmosqkculrwgpvztbjviivxxpjcpdjqcwftspgy", 30) == "xxviivjbtzvpgwrluckqsomkaysvqoygpstfwcqjdpcjp")
    assert(S2.reverseEachN("owvrtqsrhuoelrqqsflsodlbyoqecchnatwxzsdjmralawojsxvmdpidsejyvrtnvounfuojxbvhwbntnjylpsar", 34) == "tanhcceqoybldoslfsqqrleouhrsqtrvwonuovntrvyjesdipdmvxsjowalarmjdszxwrasplyjntnbwhvbxjouf")
    assert(S2.reverseEachN("zherwoorfrellitxpybytkjxdd", 10) == "rfroowrehzybypxtilleddxjkt")
    assert(S2.reverseEachN("ayfuzvblgaucxupnelwqpahstfnaedcgipmanzpbbwnkwdrqmtnyrynuekpqhtdmhudzqcjzygrlyrjlvw", 6) == "vzufyacuaglblenpuxshapqwdeanftampigcwbbpznqrdwknyryntmqpkeunuhmdthzjcqzdrylrgywvlj")
    assert(S2.reverseEachN("lmvzzpxvlszkevsewcbeugefqffrbaivmmchbneoadoqjpgiavaysyyyvjnhvpneaalgkusykonelpycwlh", 18) == "cwesvekzslvxpzzvmlhcmmviabrffqfeguebysyavaigpjqodaoenbysukglaaenpvhnjvyyhlwcyplenok")
    assert(S2.reverseEachN("tpjellwgoiaausicauwkbcupzbdxmcuvbcp", 31) == "ucmxdbzpucbkwuacisuaaiogwllejptpcbv")
    assert(S2.reverseEachN("pzdjhamjgbtnffvqttwfaqfsvwqbinswbjzpgasldzhtvsarvfswaqcdcawxtbkhjjtmywpc", 54) == "qawsfvrasvthzdlsagpzjbwsnibqwvsfqafwttqvffntbgjmahjdzpcpwymtjjhkbtxwacdc")
    assert(S2.reverseEachN("psdetxhkppehghqzrjawdowtujrmhflcdpqjl", 4) == "edspkhxtheppzqhgwajrtwodmrjuclfhjqpdl")
    assert(S2.reverseEachN("ydzrxdcksnrdnkzoymqmtrixtuppugsepeegxukfvxpplvvlrbneiaaohepnlaywrgvqqufjcgboaiyfecjhe", 63) == "yalnpehoaaienbrlvvlppxvfkuxgeepesgupputxirtmqmyozkndrnskcdxrzdyehjcefyiaobgcjfuqqvgrw")
    assert(S2.reverseEachN("bzeidypnzueddhtlhcbiuutigc", 7) == "pydiezbhddeuznuibchltcgitu")
    assert(S2.reverseEachN("dwpbwhwqcdqdsbgcgmyplnvyizfjygkbdgnsabqczbcfemwqxlsbiterdiqfeqzcthhdfmdh", 67) == "hhtczqefqidretibslxqwmefcbzcqbasngdbkgyjfziyvnlpymgcgbsdqdcqwhwbpwdhdmfd")
    assert(S2.reverseEachN("izdtgvtvn", 3) == "dzivgtnvt")
    assert(S2.reverseEachN("fybdrlrggdetcidqczgumkvpkfnbfbflefbqtzmfablnyuyxmmhwysrtg", 49) == "mxyuynlbafmztqbfelfbfbnfkpvkmugzcqdictedggrlrdbyfgtrsywhm")
    assert(S2.reverseEachN("xeoqfftrfmoptgmybnaskgyeryybzqupwylpcgqlbxqqwefcubmwxjpceegmpwxrmmdgd", 12) == "pomfrtffqoexeygksanbymgtplywpuqzbyyrcfewqqxblqgcmgeecpjxwmbudgdmmrxwp")
  }

  test("Q7"){
    assert(S2.isPalindrome("nognetomyjkvvumvpvlmzogezemfhfmezegozmlvpvmuvvkjymotengon") == true)
    assert(S2.isPalindrome("xpkpbgzerryetwhcurnjizfjfolwlpbmwgrzujabuwnftnwirujqqjpvftlaivgukgycnlyqbjbkmaigqvojhxxhjovqgiamkbjbqylncygkugvialtfvpjqqjuriwntfnwubajuzrgwmbplwlofjfzijnruchwteyrrezgbpkpx") == true)
    assert(S2.isPalindrome("jycokceaadewbbejwjmzgigyjyibouujzeamxytvohtrlmynqdvroetjreaisyiygyuqfyotgcnxixncgtoyfquygyiysiaerjteorvdqnymlrthovtyxmaezjuuobiyjygigzmjwjebbwedaaeckocyj") == true)
    assert(S2.isPalindrome("ijhfgfpaomjqcbmfvlclvfmbcqjmoapfgfhji") == true)
    assert(S2.isPalindrome("jacixsdizqjwilxvwbzrxrxrzbwvxliwjqzidsxicaj") == true)
    assert(S2.isPalindrome("lmvouximndjavyxxurkrzcqvygkbghjzbzekvwdwyeabomtybmponfcxiowvrjmudghcxcyszyrjhiiydklkdyiihjryzsycxchgdumjrvwoixcfnopmbytmobaeywdwvkezbzjhgbkgyvqczrkruxxyvajdnmixuovml") == true)
    assert(S2.isPalindrome("ajsdlaloletqfkmnihyqblnzlqtwdwtqlznlbqyhinmkfqtelolaldsja") == true)
    assert(S2.isPalindrome("qshqyynwwxtqhbwneucjfjmbkunykrmfizajqvugvypbkvqzdzyyzdzqvkbpyvguvqjazifmrkynukbmjfjcuenwbhqtxwwnyyqhsq") == true)
    assert(S2.isPalindrome("ufydpvghicroieqhnqjrjidrwyjxoolsmpnwplhhyacgnizjlgljzingcayhhlpwnpmslooxjywrdijrjqnhqeiorcihgvpdyfu") == true)
    assert(S2.isPalindrome("kwqccuidcmlntdcdujhbfcphtsjjroykboifpewmmbmszhokpfzaeomisvkdtbmsoskhnupmqflfqmpunhksosmbtdkvsimoeazfpkohzsmbmmwepfiobkyorjjsthpcfbhjudcdtnlmcdiuccqwk") == true)
    assert(S2.isPalindrome("xfszuoioesqymrtizipmkupzewhfhwezpukmpizitrmyqseoiouzsfx") == true)
    assert(S2.isPalindrome("kszmveeewjvmhfdoxtziswmfydlfqzkgwjkuupgmhzwoqeatdcbgpfefrmpwtgbntbniyotykbrbkytoyinbtnbgtwpmrfefpgbcdtaeqowzhmgpuukjwgkzqfldyfmwsiztxodfhmvjweeevmzsk") == true)
    assert(S2.isPalindrome("mtyaksdauxehbopvcguhpjjcvlgpgskebblfrgjskraautscyrdgwzrnmeurruemnrzwgdrycstuaarksjgrflbbeksgpglvcjjphugcvpobhexuadskaytm") == true)
    assert(S2.isPalindrome("hxfrwtsugwerafukrrulazrabdnljnqiiowvveauaefddhtkiptgxagabrhenjrekcxvhfkhlvmmymvitcltlucfeefcultlctivmymmvlhkfhvxckerjnehrbagaxgtpikthddfeauaevvwoiiqnjlndbarzalurrkufarewgustwrfxh") == true)
    assert(S2.isPalindrome("npyoeeqpsjfyhtgoctxrfrxtcogthyfjspqeeoypn") == true)
    assert(S2.isPalindrome("zdimgpxzehkkkputwfuojakhbddfagcffohhvdpgchnutctniantadzxgjoxdyoifbuoiktoxeuzxcrvfmvvmfvrcxzuexotkioubfioydxojgxzdatnaintctunhcgpdvhhoffcgafddbhkajoufwtupkkkhezxpgmidz") == true)
    assert(S2.isPalindrome("yifnmosvubpdjmxmduylbrzlzbtramxxgjsqtjkexppbdddhxcxbxcxhdddbppxekjtqsjgxxmartbzlzrblyudmxmjdpbuvsomnfiy") == true)
    assert(S2.isPalindrome("gesnkgwtuyltuygaxwzencnezwxagyutlyutwgknseg") == true)
    assert(S2.isPalindrome("ikuxohmaxbdzeulcnnxpbcwfhiqeqriymdhunmpjgqebdvrixxievsoosveixxirvdbeqgjpmnuhdmyirqeqihfwcbpxnncluezdbxamhoxuki") == true)
    assert(S2.isPalindrome("xpopjukifjxfvxclxpclveoigtiadrxgjsqcgyynwoflgzyinmxtzngnfiwugemsunxfexollscjztdjzgawufmqictgbgtciqmfuwagzjdtzjcslloxefxnusmeguwifngnztxmniyzglfownyygcqsjgxrdaitgioevlcpxlcxvfxjfikujpopx") == true)
    assert(S2.isPalindrome("lkgxtqraidbgnsglvtonrnqelixozmjcxgfuljentfgjyaixexisiivxtrizjapziydquiqvslppayvzxwyltlywxzvyapplsvqiuqdyizpajzirtxviisixexiayjgftnejlufgxcjmzoxileqnrnotvlgsngbdiarqtxgkl") == true)
    assert(S2.isPalindrome("rmocunlwwsyhozmjzznloynslaecivuoblqkpopkqlbouvicealsnyolnzzjmzohyswwlnucomr") == true)
    assert(S2.isPalindrome("lkrnpgmkqkgbfvzeknfkmtgszgostsidnskestwcggdardipnthchxcimjqztslbbztiblubbpevnxuzrneyxaywyaxyenrzuxnvepbbulbitzbblstzqjmicxhchtnpidradggcwtseksndistsogzsgtmkfnkezvfbgkqkmgpnrkl") == true)
    assert(S2.isPalindrome("kppkymiwqfdntfccydnejgwvehbgzvvzgbhevwgjendyccftndfqwimykppk") == true)
    assert(S2.isPalindrome("syzxhdfjxalplklplaxjfdhxzys") == true)
    assert(S2.isPalindrome("ajytuhwhmpbbgoilwjltbjbtljwliogbbpmhwhutyja") == true)
    assert(S2.isPalindrome("bauryogoyruab") == true)
    assert(S2.isPalindrome("yebsopjlzbunubzljposbey") == true)
    assert(S2.isPalindrome("ybqydcslpmgmoazpaypdlcvdrujdqcyjwaxckeluxxhehgvevxxckgvgkcxxvevghehxxulekcxawjycqdjurdvcldpyapzaomgmplscdyqby") == true)
    assert(S2.isPalindrome("hrhekeaaekehrh") == true)
    assert(S2.isPalindrome("uswkxkitkijvxbdyqmjqcdjtzjupkzhusepbrhqtpxhtaqqqathxptqhrbpesuhzkpujztjdcqjmqydbxvjiktikxkwsu") == true)
    assert(S2.isPalindrome("rfurjlzxyqlbukvmfeviezvekitabkzmyxraxemxlymncibdqsqzricdifmhbexjkecmnxpdawugtzgsifjgvdwocqkqqkqcowdvgjfisgztguwadpxnmcekjxebhmfidcirzqsqdbicnmylxmexarxymzkbatikevzeivefmvkublqyxzljrufr") == true)
    assert(S2.isPalindrome("xewaygmawcrhracwgwvebrfisxecnpbwlbtbbeltbhguidddodwjgeuqjgfudwnolojkjolonwdufgjquegjwdodddiughbtlebbtblwbpncexsifrbevwgwcarhrcwamgyawex") == true)
    assert(S2.isPalindrome("tjstzsqjijqsztsjt") == true)
    assert(S2.isPalindrome("vzwrquutftgbpldgbsfpmtropwtajbgtqrhoqauomuphdwhgkeahucisoanpcgbjqyoaztebazuwpwuzabetzaoyqjbgcpnaosicuhaekghwdhpumouaqohrqtgbjatwportmpfsbgdlpbgtftuuqrwzv") == true)
    assert(S2.isPalindrome("vihzjjoomtyrrnlvbtftzhmxljlnkfyjkmzvrarvzmkjyfknljlxmhztftbvlnrrytmoojjzhiv") == true)
    assert(S2.isPalindrome("avmcdnbmjikbcbnvxmljbsvpflbvsekmebtxtbemkesvblfpvsbjlmxvnbcbkijmbndcmva") == true)
    assert(S2.isPalindrome("pnkcstjitunbhqdgaplftsxmdkhwivqcfzwibdkogbxmnufhyvicwtfcsngtxkmjqqkhqgqnxcvivnmgacxxcagmnvivcxnqgqhkqqjmkxtgnscftwcivyhfunmxbgokdbiwzfcqviwhkdmxstflpagdqhbnutijtscknp") == true)
    assert(S2.isPalindrome("lovghfpxehnqussiaoqsgrostrntnsalehsopwitdsjmgbidibgmjsdtiwposhelasntnrtsorgsqoaissuqnhexpfhgvol") == true)
    assert(S2.isPalindrome("lmtthjohblztnayukfghweghnzevgxbxadewphtgustuhjjuzfnuucjhlnkhjtpxmaunofvfonuamxptjhknlhjcuunfzujjhutsugthpwedaxbxgveznhgewhgfkuyantzlbhojhttml") == true)
    assert(S2.isPalindrome("hrevjosvtfhvflzbeggovidlnirodgndthtdngdorinldivoggebzlfvhftvsojverh") == true)
    assert(S2.isPalindrome("izufpmasacbvvtokowruzlzkgprmllcalwhslqgqlshwlacllmrpgkzlzurwokotvvbcasampfuzi") == true)
    assert(S2.isPalindrome("bskrrtkzsyvdqiaqonckabxghkqkcmllasckptmqvaprlzrlppoutcweszhkhmpafpmfgblizwnnvlhlgpuhkiqfnoxyttyxonfqikhupglhlvnnwzilbgfmpfapmhkhzsewctuopplrzlrpavqmtpkcsallmckqkhgxbakcnoqaiqdvyszktrrksb") == true)
    assert(S2.isPalindrome("mpqbdhdzebdcqocoazvvyexcumponraxcmtvqauxrpbkpjpmqfxeliaqxjskpxqrgoodysireouuxijedqeooeqdejixuuoerisydoogrqxpksjxqailexfqmpjpkbprxuaqvtmcxarnopmucxeyvvzaocoqcdbezdhdbqpm") == true)
    assert(S2.isPalindrome("owarjcyiewagnyxuuxyngaweiycjrawo") == true)
    assert(S2.isPalindrome("fnjlqazpyxowumtkqmepveyszezitivbazzdfowtegbcfkkkmfrukijlypufxhhgajoceptetpecojaghhxfupyljikurfmkkkfcbgetwofdzzabvitizezsyevpemqktmuwoxypzaqljnf") == true)
    assert(S2.isPalindrome("dzdfgsqgjzjozyanatntwyyfxbtqretfluaxoeqsvhexvokvohtllikheznnfzmszevynpudtrfkgftwkmosgqnpfgoknzttznkogfpnqgsomkwtfgkfrtdupnyvezsmzfnnzehkillthovkovxehvsqeoxaulfterqtbxfyywtntanayzojzjgqsgfdzd") == true)
    assert(S2.isPalindrome("jxvurkzkruvxj") == true)
    assert(S2.isPalindrome("wryvzjbmmdamxmejdfkjxtoitpvnrswbymbaluxallaxulabmybwsrnvptiotxjkfdjemxmadmmbjzvyrw") == true)
    assert(S2.isPalindrome("ikkzbznaxzcdbhjgjuemotnexerwwpuphhpupwwrexentomeujgjhbdczxanzbzkki") == true)
    assert(S2.isPalindrome("csgymvmwoyogbootjrlzstjglgbhlnjxbfrehybtknlhghpbugrxsvacjppjcavsxrgubphghlnktbyherfbxjnlhbglgjtszlrjtoobgoyowmvPmygsc") == false)
    assert(S2.isPalindrome("mlbvxevtbaikjwlrnvtramqckzjmspwdrktavvwtirbiwkuquptsgrquivrvrtigijfsagommzbiljgxuoccjcudhidchxmebieeibemxhcdihducjccouxgjlibzmmogasfjigitrvrviuqrgstpuqukwibritwvvatkrdwpsmjzkcqmartvnrlwjkiabtvEexvblm") == false)
    assert(S2.isPalindrome("krchmaounpllyxlgcjfeyfaazrqvmfozzsgvcvjbyahkgtnnjhkltvyjfcysgozjesjvksaxrxwxkilhifybttwyywttbyfihlikxwxrxaskvjsejzogsycfjyvtlkhjnntgkhaybjvcvgszzofmvqrzaafyefjcglxyllpnuoamhcCrk") == false)
    assert(S2.isPalindrome("tnieqpovrbkhrbdewlnqprkzlaibjdtvuuqozlkcfnhsfcuyaksqhkgteqglowfhpzdlnpggpnldzphfwolgqetgkhqskayucfshnfcklzoquJuvtdjbialzkrpqnlwedbrhkbrvopqeint") == false)
    assert(S2.isPalindrome("yfptcfaofoofVoafctpfy") == false)
    assert(S2.isPalindrome("ixfsfydzttayyfavraplymlurjglrfzhbzdrkxzainvqtzbzivswnbksskbnwsvizbztFqvniazxkrdzbhzfrlgjrulmylparvafyyattzdyfsfxi") == false)
    assert(S2.isPalindrome("ixzkyqwwnxycssyysscIyxnwwqykzxi") == false)
    assert(S2.isPalindrome("gupqltsihrxcuajnphlhixbyqpsjuxrulzfkgvfkspwseoeppmwgzddzgwmppeoeswpskfvgkfzlurxujspqybxihlhpnjaucxrJhistlqpug") == false)
    assert(S2.isPalindrome("jqyzpvillivpzIyqj") == false)
    assert(S2.isPalindrome("yikwnoorawyxzbapjidnuqcjqgwivegzhpxxphzgeviwgqjcqundijpabzxywarSoonwkiy") == false)
    assert(S2.isPalindrome("ugvdccxfmelapddpalemfxccTdvgu") == false)
    assert(S2.isPalindrome("xdvvuqonlqqcknyatbzuysjfgeblnenewljnsiyvqkvdhwmoqgqqgqIomwhdvkqvyisnjlwenenlbegfjsyuzbtaynkcqqlnoquvvdx") == false)
    assert(S2.isPalindrome("pttdmmdttXp") == false)
    assert(S2.isPalindrome("vjuolfjkwftvburijlvhajbjnttcqvjchfezunbesefxebefvkgrgosrsdrfjtymlcooclmytjfrdsrsogrgkvfebexfesebnuzefhcjYvqcttnjbjahvljirubvtfwkjfloujv") == false)
    assert(S2.isPalindrome("sqeudvzequurxggzvdktcmbiujhxwrtteoblbyzbnnbzyblboettrwxhjuibmXctkdvzggxruuqezvdueqs") == false)
    assert(S2.isPalindrome("phqydtgvsbwyyxkivecrpveywnmebdjbzinqteqccqkevjzxlissiPlxzjvekqccqetqnizbjdbemnwyevprcevikxyywbsvgtdyqhp") == false)
    assert(S2.isPalindrome("noxccxGon") == false)
    assert(S2.isPalindrome("jrrfedcaijwyftzyukpjkcyydxttxdyyckjpkuyztfywjQiacdefrrj") == false)
    assert(S2.isPalindrome("stqivmwkkwmviqYts") == false)
    assert(S2.isPalindrome("qbacjcwwmozjfnhssnrwycjotpnrmefgdafgjoldengivddfqnqdjgrvrdwxndsmidciabiqbhcfgazuekkllkkeuzagfchbqibaicdimsdnxwdrvrgjdqnqfddvignedlojgQfadgfemrnptojcywrnsshnfjzomwwcjcabq") == false)
    assert(S2.isPalindrome("ytggrhsuncnsmtynctssnmtwptiwtvbbvtwitpwtmnsstcnytmsncnushrggtyX") == false)
    assert(S2.isPalindrome("rncbhvhbechnxorlltebwvaywqaasdgyfalmxqwdkehyuxgyybxuzusmsdcmieqbkraarkbqeimcdsmsuzuxbyygxuyhekdwqxmlafygdsaaqwyavwbetllIroxnhcebhvhbcnr") == false)
    assert(S2.isPalindrome("sazsiulctyokdcnpjlrmeufokijtwtioatvsxecfslhjdnmpuopjcgagyvuxuoijcfqfhxxhfqfcjiouxuvygagcjpoupmndjhlsfcexsvtaoitwtjikofuemrljpncdkoytcluiszNas") == false)
    assert(S2.isPalindrome("etaqpmisayuffivutqpoovhnintityoxxvjfkkedbfcacjanyllbhiceqvwgtlcpotjgnrrngjtopcltgwvqecihbllynajcacfbdekkfjvxZxoytitninhvoopqtuviffuyasimpqate") == false)
    assert(S2.isPalindrome("kzookgwrlejtmrjnkmrinbqfwggqsenhyuixafbzrwxftrqojdrcrjtvvtjrcZrdjoqrtfxwrzbfaxiuyhnesqggwfqbnirmknjrmtjelrwgkoozk") == false)
    assert(S2.isPalindrome("xvzkofdilbdgbfrmgmggmgmrfbgdblidfoAkzvx") == false)
    assert(S2.isPalindrome("yluapfktrphcasxfnqzcpnoonpczqnfxsaQchprtkfpauly") == false)
    assert(S2.isPalindrome("octyolvhjcursuvmpexfltgvfirgtjrgfquaoljvpxxpvjloauqfgrjtgrifvgtlEfxepmvusrucjhvloytco") == false)
    assert(S2.isPalindrome("gusiwstdbcieexyvnevpbkgwcfqxoogqhginamoucdpznyjilakybcaouyhyezjydpxquayyyyauqxpdyjzeyhyuoacbykalijynzpdcuomanighqgooxqfcwgkbpveNnvyxeeicbdtswisug") == false)
    assert(S2.isPalindrome("mcjhqzhfudcvlhknwhowcmuelpfhgjfvzuakflqopcxmymvfxvqaiwjuqwijqujgeevrzfwlechvqgmmfcvawglpjstrhfusmmPsufhrtsjplgwavcfmmgqvhcelwfzrveegjuqjiwqujwiaqvxfvmymxcpoqlfkauzvfjghfpleumcwohwnkhlvcdufhzqhjcm") == false)
    assert(S2.isPalindrome("wwfrdwnclzvijwtcqdgpmrpjgkzcstyazaahbltwospziffopijzzgjqngomrfgzvdhehqtdmfngyynouykojfyyfjokyuonyygnfmdtqhehdvzgfrmognqjgzzjipofGfizpsowtlbhaazaytsczkgjprmpgdqctwjivzlcnwdrfww") == false)
    assert(S2.isPalindrome("lauazzgicewmzrlanrhsqgljmnfzfotjwygykcqwopiaaipowqckygywjtFofzfnmjlgqshrnalrzmwecigzzaual") == false)
    assert(S2.isPalindrome("nfnhdxojsxprlcmfvlhphnzzqsirerqztrkwwtnjrbhathjiqpjgbbgjpqijhtahbrjntwwkrtzqrerisqzznhphlvfmclrpxsjoxdhnfnZ") == false)
    assert(S2.isPalindrome("lmnnsttsDnnml") == false)
    assert(S2.isPalindrome("kqqsbchiyvthipfjgjhoaelteyzejtijkquaaylxcwlfflwcxlyaauqkjitjezyeJtleaohjgjfpihtvyihcbsqqk") == false)
    assert(S2.isPalindrome("wzhvxdwtfrcvuuwtfedmhedhlodqfzikztaeojhtwqhwzieddeizwhqwthjoeUatzkizfqdolhdehmdeftwuuvcrftwdxvhzw") == false)
    assert(S2.isPalindrome("saanzwhhxohnptkfgraxnflcdokjfpxhteoervmvyccmlxovsggsvoxlmccyvmvreoethxpfjkodclfnxargfktpnGhoxhhwznaas") == false)
    assert(S2.isPalindrome("fexgwdlfzxfleypjapdmsiuqkrgpnbcquhjguwvohfdjdiguytovnddzyaxifnoeitkkprouliyqhfyjwyqzzqywjyfhqyiluorpkktieonfixayzddnvotyugidjdfhovwugjhuqcbnpgrkquismdUpajpyelfxzfldwgxef") == false)
    assert(S2.isPalindrome("bbwnyrjcxrukdcoifxnnmxayfuyzllzyufyaxmnnxfiocdkuWrxcjrynwbb") == false)
    assert(S2.isPalindrome("skzbloqzhkrtnommczjrwdzflvxwxmkkanrclqjhhjqlcrnakkmxwCxvlfzdwrjzcmmontrkhzqolbzks") == false)
    assert(S2.isPalindrome("hkrdcdiypctqvreeogurlallumdzwnsljardthxmlmodlpxuxkqqqunyaytnnssnntyaynuqqqkxuxpldomlmxhtdrajlsnwzdmullalUrugoeervqtcpyidcdrkh") == false)
    assert(S2.isPalindrome("untbvvxwmalaowkxhvyharepkoztobfnsiqmldoddujlwgpwpcjmmrlidzksjyjcxceycrmvuupoebvctsxxstcvbeopuuvmrcyecxcjyjskzdilrmmjcpwpgwljuddodlmqisnfbotzokperahyvhxIkwoalamwxvvbtnu") == false)
    assert(S2.isPalindrome("cakccUkac") == false)
    assert(S2.isPalindrome("ajgyhgkwnxzopnauxylmzevhmqoyeheoiuvdoauzomwnmmnwmozuaodvuioeheyoqmhvezmlyMxuanpozxnwkghygja") == false)
    assert(S2.isPalindrome("wizhkfinqfsaqmexwmeoqxxocyxzrejkmimeajvuuvjaemimkjerzxycoxxqoemwxemqaCsfqnifkhziw") == false)
    assert(S2.isPalindrome("jnnubvwppTwvbunnj") == false)
    assert(S2.isPalindrome("zrmztjpvvBpjtzmrz") == false)
    assert(S2.isPalindrome("tmiqphzissizhpqLimt") == false)
    assert(S2.isPalindrome("ragbmbtzxwepnkssiivesnuhqkpmdhdpljhcqckvrfeodvfyszlwkwpbgdxpboopkfaumelwselcdhkbakainiosckvvkcsoiniakabkhdcleswlemuafkpoobpxdgbpwkwlzsyfvdoIefrvkcqchjlpdhdmpkqhunseviissknpewxztbmbgar") == false)
    assert(S2.isPalindrome("jkbyghylotmmfqjdnveddokpwhrfcirwqheksxzlnssbineqrgqwyiaqrivpthehuxzdxxbexgrgymhuqkqelgnxbepaovlsummuslvoapebxngleqkTquhmygrgxebxxdzxuhehtpvirqaiywqgrqenibssnlzxskehqwricfrhwpkoddevndjqfmmtolyhgybkj") == false)
  }

  test("Q8"){
    assert(S2.areRelativelyPrime(521, 5) == true)
    assert(S2.areRelativelyPrime(18, 997) == true)
    assert(S2.areRelativelyPrime(579, 545) == true)
    assert(S2.areRelativelyPrime(223, 526) == true)
    assert(S2.areRelativelyPrime(209, 64) == true)
    assert(S2.areRelativelyPrime(782, 591) == true)
    assert(S2.areRelativelyPrime(491, 236) == true)
    assert(S2.areRelativelyPrime(264, 331) == true)
    assert(S2.areRelativelyPrime(295, 647) == true)
    assert(S2.areRelativelyPrime(511, 844) == true)
    assert(S2.areRelativelyPrime(409, 348) == true)
    assert(S2.areRelativelyPrime(382, 721) == true)
    assert(S2.areRelativelyPrime(105, 332) == true)
    assert(S2.areRelativelyPrime(202, 205) == true)
    assert(S2.areRelativelyPrime(277, 132) == true)
    assert(S2.areRelativelyPrime(246, 965) == true)
    assert(S2.areRelativelyPrime(643, 982) == true)
    assert(S2.areRelativelyPrime(100, 107) == true)
    assert(S2.areRelativelyPrime(385, 267) == true)
    assert(S2.areRelativelyPrime(227, 811) == true)
    assert(S2.areRelativelyPrime(30, 17) == true)
    assert(S2.areRelativelyPrime(829, 514) == true)
    assert(S2.areRelativelyPrime(351, 1000) == true)
    assert(S2.areRelativelyPrime(119, 177) == true)
    assert(S2.areRelativelyPrime(383, 241) == true)
    assert(S2.areRelativelyPrime(636, 893) == true)
    assert(S2.areRelativelyPrime(656, 731) == true)
    assert(S2.areRelativelyPrime(593, 353) == true)
    assert(S2.areRelativelyPrime(44, 49) == true)
    assert(S2.areRelativelyPrime(31, 32) == true)
    assert(S2.areRelativelyPrime(346, 351) == true)
    assert(S2.areRelativelyPrime(3, 1) == true)
    assert(S2.areRelativelyPrime(173, 99) == true)
    assert(S2.areRelativelyPrime(168, 443) == true)
    assert(S2.areRelativelyPrime(509, 66) == true)
    assert(S2.areRelativelyPrime(601, 640) == true)
    assert(S2.areRelativelyPrime(225, 131) == true)
    assert(S2.areRelativelyPrime(5, 204) == true)
    assert(S2.areRelativelyPrime(34, 421) == true)
    assert(S2.areRelativelyPrime(36, 589) == true)
    assert(S2.areRelativelyPrime(470, 169) == true)
    assert(S2.areRelativelyPrime(132, 251) == true)
    assert(S2.areRelativelyPrime(441, 610) == true)
    assert(S2.areRelativelyPrime(731, 822) == true)
    assert(S2.areRelativelyPrime(303, 166) == true)
    assert(S2.areRelativelyPrime(493, 2) == true)
    assert(S2.areRelativelyPrime(529, 283) == true)
    assert(S2.areRelativelyPrime(84, 89) == true)
    assert(S2.areRelativelyPrime(109, 103) == true)
    assert(S2.areRelativelyPrime(904, 607) == true)
    assert(S2.areRelativelyPrime(6532, 4899) == false)
    assert(S2.areRelativelyPrime(11063, 13801) == false)
    assert(S2.areRelativelyPrime(7998, 25668) == false)
    assert(S2.areRelativelyPrime(6075, 9882) == false)
    assert(S2.areRelativelyPrime(18340, 1295) == false)
    assert(S2.areRelativelyPrime(19006, 20296) == false)
    assert(S2.areRelativelyPrime(11916, 7164) == false)
    assert(S2.areRelativelyPrime(2100, 3024) == false)
    assert(S2.areRelativelyPrime(36894, 5343) == false)
    assert(S2.areRelativelyPrime(19635, 15785) == false)
    assert(S2.areRelativelyPrime(17138, 2870) == false)
    assert(S2.areRelativelyPrime(10782, 12834) == false)
    assert(S2.areRelativelyPrime(18054, 2788) == false)
    assert(S2.areRelativelyPrime(8000, 960) == false)
    assert(S2.areRelativelyPrime(38560, 14440) == false)
    assert(S2.areRelativelyPrime(14596, 2829) == false)
    assert(S2.areRelativelyPrime(15246, 17661) == false)
    assert(S2.areRelativelyPrime(2724, 1752) == false)
    assert(S2.areRelativelyPrime(7059, 7137) == false)
    assert(S2.areRelativelyPrime(5418, 34356) == false)
    assert(S2.areRelativelyPrime(11921, 5980) == false)
    assert(S2.areRelativelyPrime(9510, 19800) == false)
    assert(S2.areRelativelyPrime(1688, 816) == false)
    assert(S2.areRelativelyPrime(36784, 26904) == false)
    assert(S2.areRelativelyPrime(4658, 19890) == false)
    assert(S2.areRelativelyPrime(14080, 28840) == false)
    assert(S2.areRelativelyPrime(34405, 7175) == false)
    assert(S2.areRelativelyPrime(3800, 136) == false)
    assert(S2.areRelativelyPrime(29150, 40050) == false)
    assert(S2.areRelativelyPrime(26960, 8120) == false)
    assert(S2.areRelativelyPrime(20553, 12648) == false)
    assert(S2.areRelativelyPrime(3956, 23994) == false)
    assert(S2.areRelativelyPrime(8640, 4624) == false)
    assert(S2.areRelativelyPrime(14250, 14050) == false)
    assert(S2.areRelativelyPrime(11220, 11100) == false)
    assert(S2.areRelativelyPrime(6816, 46512) == false)
    assert(S2.areRelativelyPrime(45350, 25250) == false)
    assert(S2.areRelativelyPrime(25740, 24640) == false)
    assert(S2.areRelativelyPrime(23114, 16250) == false)
    assert(S2.areRelativelyPrime(11680, 17580) == false)
    assert(S2.areRelativelyPrime(11535, 2430) == false)
    assert(S2.areRelativelyPrime(30286, 3610) == false)
    assert(S2.areRelativelyPrime(36080, 7011) == false)
    assert(S2.areRelativelyPrime(1968, 15408) == false)
    assert(S2.areRelativelyPrime(11973, 12584) == false)
    assert(S2.areRelativelyPrime(12447, 9396) == false)
    assert(S2.areRelativelyPrime(3738, 3138) == false)
    assert(S2.areRelativelyPrime(31536, 12384) == false)
    assert(S2.areRelativelyPrime(11297, 2340) == false)
    assert(S2.areRelativelyPrime(37926, 46501) == false)
  }

  test("Q9"){
    assert(S2.areValidParentheses("(0+5)(5+2)(2+1)(4+9)(0+5)(7+(6+(2+7)(5+8)(2+(3+(6+(6+(3+6)(6+(0+7)8)0)6)5)4)0)0)(5+3)") == true)
    assert(S2.areValidParentheses("(8+7)(3+(4+4)1)(3+1)(1+(1+6)3)(7+(0+(8+(2+(9+4)(3+(8+(0+(3+(9+6)6)(6+8)(1+6)2)4)(9+0)3)4)6)7)5)") == true)
    assert(S2.areValidParentheses("(2+8)(2+3)(8+8)(4+(3+3)0)(4+(9+(7+2)9)5)") == true)
    assert(S2.areValidParentheses("(0+(1+1)(1+(4+6)(7+(2+(3+7)(3+6)(9+(3+(0+7)0)(3+3)4)6)(3+9)5)4)(2+3)6)(2+8)(9+7)(2+(3+(5+(4+1)2)5)9)") == true)
    assert(S2.areValidParentheses("(6+5)(6+3)(8+(5+(2+7)(9+6)(7+(2+(6+6)(9+(0+9)8)4)(4+8)8)1)3)") == true)
    assert(S2.areValidParentheses("(2+(9+(2+(0+4)9)(9+0)(0+(7+(7+2)(8+6)2)2)(0+1)5)(7+6)6)") == true)
    assert(S2.areValidParentheses("(7+9)(3+5)(0+(6+(5+8)(7+0)(1+(8+(3+(6+0)(2+5)5)(3+(2+(9+5)(5+6)9)6)1)5)5)8)") == true)
    assert(S2.areValidParentheses("(1+(7+(4+(7+4)(2+(2+(7+4)5)5)6)4)1)") == true)
    assert(S2.areValidParentheses("(3+4)(9+(3+(2+7)3)4)(0+(0+(3+2)4)4)(6+4)(3+8)(5+(4+0)(3+7)(9+(1+(1+(9+6)7)6)(5+9)(5+(9+6)(6+3)3)8)4)") == true)
    assert(S2.areValidParentheses("(5+(8+9)1)(7+1)(0+5)(6+6)") == true)
    assert(S2.areValidParentheses("(9+(9+(8+5)2)9)") == true)
    assert(S2.areValidParentheses("(7+(3+(5+1)(9+4)(5+9)5)7)") == true)
    assert(S2.areValidParentheses("(7+7)(9+(7+6)6)(6+4)(8+6)(7+(3+3)6)") == true)
    assert(S2.areValidParentheses("(1+(7+4)(8+2)(1+7)6)(8+(9+6)0)(3+(5+8)(0+8)0)") == true)
    assert(S2.areValidParentheses("(6+2)(4+(9+(1+8)9)(3+0)7)(3+(8+6)(2+(5+(6+6)(7+(1+4)6)1)(7+(1+2)(9+1)3)7)(1+4)(6+(4+7)(0+(3+8)3)4)8)") == true)
    assert(S2.areValidParentheses("(6+(9+(8+5)(2+2)4)(2+4)(5+(1+(7+9)6)5)(5+(9+(3+(1+(5+1)2)6)(7+(1+(7+8)(2+6)1)9)(6+(8+0)(0+8)9)7)4)2)") == true)
    assert(S2.areValidParentheses("(7+(0+3)6)(3+6)(9+(6+3)8)(8+(4+(8+2)8)(3+0)(2+3)7)(8+6)(5+0)(2+7)") == true)
    assert(S2.areValidParentheses("(3+5)(9+5)(5+9)(4+5)(9+(1+5)1)(2+3)(3+(4+(9+9)6)2)") == true)
    assert(S2.areValidParentheses("(0+(0+(7+(6+9)4)(3+0)2)6)") == true)
    assert(S2.areValidParentheses("(6+8)(3+8)(8+2)(9+(2+(7+(0+3)1)(7+(2+9)(6+8)(0+(0+(3+5)8)0)4)(2+(0+(3+(1+(2+1)1)1)1)1)7)9)") == true)
    assert(S2.areValidParentheses("(2+(1+(9+(0+9)6)(7+4)(6+6)5)(1+(7+6)(5+8)4)4)(0+8)") == true)
    assert(S2.areValidParentheses("(2+2)(2+0)(0+(5+(5+(8+(8+6)(6+2)(9+8)(8+(4+6)(3+(9+(5+(6+(7+(5+2)(9+2)0)9)0)6)4)6)6)5)8)4)") == true)
    assert(S2.areValidParentheses("(2+(7+(8+8)9)8)") == true)
    assert(S2.areValidParentheses("(1+(5+(5+(2+(8+(5+(0+(6+(5+0)2)4)5)9)(2+(2+9)(9+(8+(2+3)(5+(5+(4+(3+6)4)2)7)0)1)9)7)4)6)6)") == true)
    assert(S2.areValidParentheses("(7+(2+5)(9+(3+9)5)1)") == true)
    assert(S2.areValidParentheses("(1+(0+1)5)(6+5)(2+(4+(6+1)3)(2+(1+8)(6+7)(6+2)6)(1+(3+8)(5+7)(7+3)(9+(5+(1+6)1)6)6)9)") == true)
    assert(S2.areValidParentheses("(5+4)(3+(8+(8+7)8)7)(8+(8+(7+6)2)1)(4+6)(9+(1+(2+(9+(7+1)(4+9)5)0)(3+(6+2)(3+5)4)9)9)(2+(2+5)(2+8)2)") == true)
    assert(S2.areValidParentheses("(9+6)(1+2)(6+2)(1+1)(3+(7+(7+0)3)(7+5)5)(1+2)(8+(9+9)9)(8+5)") == true)
    assert(S2.areValidParentheses("(9+2)(2+(5+(2+(2+2)4)7)3)") == true)
    assert(S2.areValidParentheses("(7+(2+(6+(4+2)(6+(4+0)(4+(3+(1+(9+6)8)2)(8+(3+(1+(2+(0+(7+2)5)3)6)3)2)5)1)3)5)7)") == true)
    assert(S2.areValidParentheses("(2+(6+2)(8+(8+(1+(7+(4+2)(0+(7+6)8)4)1)8)6)0)") == true)
    assert(S2.areValidParentheses("(2+(7+(7+6)0)9)(5+(3+0)3)(8+(3+(7+0)(2+4)1)1)") == true)
    assert(S2.areValidParentheses("(9+(8+0)1)(4+(6+4)6)(2+9)(4+7)") == true)
    assert(S2.areValidParentheses("(8+(8+1)5)(7+(7+1)(4+9)(0+6)(9+(2+(8+3)4)5)0)") == true)
    assert(S2.areValidParentheses("(7+(7+(3+(2+(8+2)(3+5)2)8)8)(1+(2+(5+2)(9+3)3)0)(7+3)(3+4)1)") == true)
    assert(S2.areValidParentheses("(6+8)(9+(3+8)4)(8+6)(6+(7+(9+(5+7)5)(6+(4+1)9)5)1)(2+(9+(3+9)0)(9+3)9)(8+(1+(3+4)(3+0)(8+(2+5)8)5)8)") == true)
    assert(S2.areValidParentheses("(2+(3+(6+6)6)7)") == true)
    assert(S2.areValidParentheses("(5+6)(4+3)(9+(6+4)5)") == true)
    assert(S2.areValidParentheses("(4+6)(1+(3+(4+4)8)0)(2+(8+(1+(1+(9+(6+(5+(3+5)(3+(6+9)4)9)(7+3)1)8)1)6)2)5)") == true)
    assert(S2.areValidParentheses("(7+2)(5+1)(9+(3+(4+6)7)(6+(7+1)(5+8)(3+6)7)6)(7+6)(5+2)(5+8)(5+0)") == true)
    assert(S2.areValidParentheses("(1+(4+(6+(8+8)(4+8)3)(3+3)(6+5)(5+8)(0+6)(4+(5+1)9)(9+0)3)(8+(4+7)(1+2)8)9)(7+5)(5+5)(8+7)") == true)
    assert(S2.areValidParentheses("(0+4)(2+7)(2+(7+(8+(0+4)(9+(2+(6+(2+0)0)(0+0)8)7)(0+(1+(3+(8+4)(5+3)8)(1+7)9)(7+0)2)8)(3+5)5)5)") == true)
    assert(S2.areValidParentheses("(7+(1+(3+6)9)9)(9+(0+5)1)(0+(5+(8+6)6)6)") == true)
    assert(S2.areValidParentheses("(4+6)(5+(7+7)9)(4+0)") == true)
    assert(S2.areValidParentheses("(4+(2+5)8)(4+(0+5)4)") == true)
    assert(S2.areValidParentheses("(2+(9+6)9)") == true)
    assert(S2.areValidParentheses("(4+(3+9)(5+(6+5)1)4)(7+(5+7)(8+6)9)(6+3)(6+9)(6+(0+(9+(9+0)(7+0)0)5)2)") == true)
    assert(S2.areValidParentheses("(8+5)(7+4)(0+9)(1+9)(6+(7+8)(5+(0+1)(1+(7+0)0)4)0)(0+9)(7+6)(9+4)") == true)
    assert(S2.areValidParentheses("(8+(9+6)8)(0+(8+(0+(0+9)4)(3+3)6)2)") == true)
    assert(S2.areValidParentheses("(9+(7+(9+0)(1+(9+(0+8)(7+8)(5+(6+6)1)6)(7+(5+(6+7)(8+9)2)(0+(1+(4+5)8)(2+0)(8+5)9)(6+5)6)0)7)0)") == true)
    assert(S2.areValidParentheses("(4+(3)(1+(5+7)(8+7)0)") == false)
    assert(S2.areValidParentheses(")(8+3)(4+1)(") == false)
    assert(S2.areValidParentheses("(9)+(6+4)4)(8+3)") == false)
    assert(S2.areValidParentheses("(0+)(9+3)(3+6)6)(5+7)(9+1)") == false)
    assert(S2.areValidParentheses(")(1+(2+(2+(3+(6+0)0)2)6)5)(") == false)
    assert(S2.areValidParentheses("(2+6)((8+1)(9+1)(5+4)") == false)
    assert(S2.areValidParentheses("(2+(3)+5)5)") == false)
    assert(S2.areValidParentheses(")(9+(6+4)3)(") == false)
    assert(S2.areValidParentheses(")(3+(5+7)8)(8+0)(0+6)(") == false)
    assert(S2.areValidParentheses(")(7+(3+(8+4)(5+9)(7+2)4)0)(") == false)
    assert(S2.areValidParentheses("(8+8()(6+2)") == false)
    assert(S2.areValidParentheses(")(8+(7+9)2)(") == false)
    assert(S2.areValidParentheses(")(6+(9+(2+(4+7)8)2)8)(") == false)
    assert(S2.areValidParentheses(")(3+8)(6+1)(") == false)
    assert(S2.areValidParentheses("(3+5)(1+(0+()3+5)(9+5)4)4)") == false)
    assert(S2.areValidParentheses(")(0+(7+4)4)(3+(1+4)(1+0)9)(") == false)
    assert(S2.areValidParentheses("(1+(6)(8+1)(6+(4+4)7)") == false)
    assert(S2.areValidParentheses("(9+(7)(0+0)") == false)
    assert(S2.areValidParentheses("(4+((8+0)5)") == false)
    assert(S2.areValidParentheses("(2+0)(1(+6)(9+(2+2)9)") == false)
    assert(S2.areValidParentheses(")(7+9)(4+6)(6+6)(9+(5+6)3)(") == false)
    assert(S2.areValidParentheses("()5+(2+0)4)") == false)
    assert(S2.areValidParentheses("(8)+8)(4+1)") == false)
    assert(S2.areValidParentheses(")(5+(0+(6+5)7)9)(") == false)
    assert(S2.areValidParentheses("(1+6)(5+((5+0)4)(8+9)") == false)
    assert(S2.areValidParentheses("(3+9)()0+2)(3+5)") == false)
    assert(S2.areValidParentheses("(7+2)(9+7)((9+(3+5)9)") == false)
    assert(S2.areValidParentheses("(6+2)(7+2)(6(+(8+(7+6)6)2)") == false)
    assert(S2.areValidParentheses("((4+6)(8+1)") == false)
    assert(S2.areValidParentheses("(6+3)(7+((2+(8+3)5)8)") == false)
    assert(S2.areValidParentheses("(2+)3)(0+(2+(8+2)7)0)") == false)
    assert(S2.areValidParentheses(")(9+(7+3)(9+9)4)(0+(4+2)9)(") == false)
    assert(S2.areValidParentheses(")(2+7)(3+9)(9+0)(6+4)(") == false)
    assert(S2.areValidParentheses(")(8+9)(5+(1+(5+0)3)7)(") == false)
    assert(S2.areValidParentheses("(1+(6+()7+(9+0)3)3)0)") == false)
    assert(S2.areValidParentheses("(0+((5+1)7)(2+2)") == false)
    assert(S2.areValidParentheses("(5+7)(2+)7)(7+9)(0+(7+0)1)") == false)
    assert(S2.areValidParentheses("(7+(7+(8+()9+6)9)7)8)") == false)
    assert(S2.areValidParentheses("(7(+3)(9+1)") == false)
    assert(S2.areValidParentheses("(9+(7+()6+2)2)9)") == false)
    assert(S2.areValidParentheses("(5+(1+()5+2)1)3)") == false)
    assert(S2.areValidParentheses(")(3+(9+(1+(2+2)7)3)3)(") == false)
    assert(S2.areValidParentheses("(6+1)(2+)4)(7+(2+2)(0+9)8)") == false)
    assert(S2.areValidParentheses("(2+1)((6+(4+5)4)") == false)
    assert(S2.areValidParentheses("(7+3)(0)+4)(4+(8+3)6)(6+0)") == false)
    assert(S2.areValidParentheses("((1+(3+9)(0+6)4)") == false)
    assert(S2.areValidParentheses("(2(+(2+(4+(9+(9+8)4)4)2)4)") == false)
    assert(S2.areValidParentheses(")(6+(6+5)4)(") == false)
    assert(S2.areValidParentheses("(8+)(3+(6+5)9)1)") == false)
    assert(S2.areValidParentheses("(6+0)(3+((7+5)(7+2)(8+1)1)") == false)
  }

  test("Q10"){
    assert(S2.addBinaryNumbers("1010110001111111111101010101100111100011011110110111111000010010", "1000110101110100101110010011000000001010011001101101110000000100") == "10011100111110100101011101000100111101101111000100101101000010110")
    assert(S2.addBinaryNumbers("11010010111110101101101010101101111111000110011111101000010001", "10111010101101110111110111100110010000100110010101101100011001000") == "11010101000101101101100100111100000000011111001001101001011011001")
    assert(S2.addBinaryNumbers("1010101100110001101110010011010000000110001110101100010111101101001", "100000011011000110100100001010010000100001100100011000100100001100") == "1110110000001010100010110100100010001010011011001111011100001110101")
    assert(S2.addBinaryNumbers("10111111101001011101000000011010000101101000011110111010000001011", "1110011011100110101000101011100101110011101010010001111110001010") == "100110011000110010010000101110110110100000101110001001001110010101")
    assert(S2.addBinaryNumbers("101100011001111011101010100001111001110010111111011111010011101101", "101100000110100000101101010001110111000011111111001000100100") == "101101000110000010001011001111001011101010000011011110011100010001")
    assert(S2.addBinaryNumbers("11010100110111101100101101010101101000000100111010000010110101000", "1000001110011001000011001101011001101011001110101101111000000111001") == "1011100011010000101111111010101111010011010011100111111010111100001")
    assert(S2.addBinaryNumbers("1000010101100110111101001010101100100101011101010000000010110001010", "1010010010101010111101100010011001011000011011000100111001110111001") == "10010101000010001111010101101000101111101111000010100111100101000011")
    assert(S2.addBinaryNumbers("1010101000011110010100110110110100011000100001001011001111100010000", "110100001000111001110010100000110001101000110100110111000001101001") == "10001001001100101100011001010111010100101100111110010000111101111001")
    assert(S2.addBinaryNumbers("101000010000010100000010001000110100110011011010110111100101111000", "10101010001011001111100100010001100110110111000011100000000010110") == "111101100001101101111110101011000001101010010011010011100110001110")
    assert(S2.addBinaryNumbers("110010101110100011101111100101110001101110011000101010001001101", "100000001110010101001000100001000110100110110101111010100100011110") == "100110100100001001100110011101110100110100101000111111110101101011")
    assert(S2.addBinaryNumbers("11100111000001011001010111000100110111101111010011010011101001011", "1010110111101110010000101111010011011100101110111110010010101101") == "100111101111111001011011100111111010011010101001011000101111111000")
    assert(S2.addBinaryNumbers("10000000110101000111000111100111100000001101100110001010001100101", "110101010010110001101011100010101010000100110111101101111110010110") == "1000101011001011010100100011111100110000110100100011111001111111011")
    assert(S2.addBinaryNumbers("1000101000000000101000110101001101101000111001111011000111011011011", "110110100100110101101011001011111001111010010000100101011101101") == "1001011110100101011110100000011001100010110100001011101100111001000")
    assert(S2.addBinaryNumbers("110000010011010101000000011100011001010001010100100100010100101110", "1001100101000001111010100111010000111010100110001000010111111110010") == "1111100111011100100010101010110100000100110000101100111010100100000")
    assert(S2.addBinaryNumbers("11000010011110011100011111101011101001100000100010000010000001100", "1111001010100010000010001010001000111010100100011010100101110101") == "100111011110010101100110000111100110000110101000101010110110000001")
    assert(S2.addBinaryNumbers("110010000101010101000110111111001001001100001110010011011000010111", "10100010010110101000001110001100110110011111101100010000100110010") == "1000110011000001010001000110000110000000000001011110101011101001001")
    assert(S2.addBinaryNumbers("101010000101100001101010110110101100001011011110101010011111101101", "11100011011110111010010101011101110100001000010100001001100101010") == "1000110100001011000111101100010011010101100100001001011101100010111")
    assert(S2.addBinaryNumbers("100111010110001001011001000000010101011001011111101111010100000010", "111110010110011100010110000000001110100100001000110111010111110101") == "1100101101100100101101111000000100011111101101000100110101011110111")
    assert(S2.addBinaryNumbers("110011011001000000110000000011011111010000001100100111001101101", "101000011111011101110001011111011010000011101110100011011110010001") == "101110111010100101110111011111110101111101110000001000010111111110")
    assert(S2.addBinaryNumbers("110110100000100001110011111010101111110110100101001111111101001000", "100000001110101111101110000001101101000101010000100111011001010") == "111010100010010111110001101010111101011111001111010100111000010010")
    assert(S2.addBinaryNumbers("1000100001011000001100101110010111100001100010101101101100100010011", "11100111101110001101110111010100001001110100001111001011001110110") == "1100001001000110011010100101101011101011010110111100110111110001001")
    assert(S2.addBinaryNumbers("10101101100101010010111110111101110110100111110110110001101000111", "1010100100100100111100010101000111111000001010000000100011010111") == "100000010001001111010100001100110110101101001000110110110000011110")
    assert(S2.addBinaryNumbers("11011010110000010001010000110100111010111100110001101001111011111", "110100000010001110101010100010110000010000011001001000011101010101") == "1001111011000010000110100101001010111100111111111010101101100110100")
    assert(S2.addBinaryNumbers("1001111011001011001011101100011110100011000011111101011101101101010", "100000000100011110101110111110111110011001000110011011000111010100") == "1101111011101111000001100100010110010110001100110000110110100111110")
    assert(S2.addBinaryNumbers("110000010001111110111001010100001001010100110101101011000011100111", "101111011101101111010111011101001100011101100001111101011000111111") == "1011111101111101110010000110001010101110010010111101000011100100110")
    assert(S2.addBinaryNumbers("100100011001101111000100000011110000101101001111111011111100000010", "110001010111110001001100110011011010011101001100000101001011011100") == "1010101110001100000010000110111001011001010011100000001000111011110")
    assert(S2.addBinaryNumbers("1010011000000011011011001100011001111011000001110111111101101010000", "101010101001111111010100111000100001100100001101000100111001110100") == "1111101101010011010101110011011110000111100011100000100100111000100")
    assert(S2.addBinaryNumbers("11001111001110000000111111011001111011111110010011101101111001100", "1001110111101010001110100001110000000000101011001010011111000010111") == "1101000110111000001111100001001001111100101001011110001100111100011")
    assert(S2.addBinaryNumbers("100100100100110000110010110110101110101100001111010010010100011000", "1001100100010101001100101100110110010011101101110100011110100111101") == "1110001000111011010011000011101100001001001111101110110001001010101")
    assert(S2.addBinaryNumbers("111000010010011001010010100011101110001101011000100101010110100", "101001101000111001010110111001100010001111011100100100001111") == "111101011111100000011101011010111010011111010100001001111000011")
    assert(S2.addBinaryNumbers("1001000001011011011101111111000001011011111101001100001100111100101", "1000101011011001100001000101001110001000110011001110001110110011101") == "10001101100110100111111000100001111100100110000011010011011110000010")
    assert(S2.addBinaryNumbers("100001011101100101111010100011101001101011100101000000011001100101", "11010011011000101110111111001000000100100110011100000101100000000") == "111011111000101011110010011100101010010000011000100001000101100101")
    assert(S2.addBinaryNumbers("101111010000011000101001000000000011011010011100101110111000000", "110001101100110011101010010111001001000001011101100010101100011111") == "110111100110110110101111011111001001011100110001001000100011011111")
    assert(S2.addBinaryNumbers("110100101111000110111110011001010101101001000100001100011100010110", "110101101100111010010101001001100111001010110001111000001000010000") == "1101010011100000001010011100010111100110011110110000100100100100110")
    assert(S2.addBinaryNumbers("1000011101110100100100001011101000001101101000000000000110101001110", "11001001000110101011101101101010111101011000010010110011000011") == "1000110110111101011001101001010101100101010011000010011101000010001")
    assert(S2.addBinaryNumbers("11001010100101001111110000001100010101010010101111110100100111", "10000001100011010110000010100011010110001010111001100111101101101") == "10011010111000000000000000100100111000110101001111100110010010100")
    assert(S2.addBinaryNumbers("111110001001010101011001101111110011110101010011010101111011111", "11100001000001100110100101111101101101001001001010100100010110010") == "100011111001010111011111111101101100000111110011101111010010010001")
    assert(S2.addBinaryNumbers("111111001000000101110100000011010111111101001101110111001100111111", "101011101011101100000110010101001001000101010001011110101100001011") == "1101010110011110001111010011000100001000010011111010101111001001010")
    assert(S2.addBinaryNumbers("1111111011100101111000100001111010110110011101001111111011101000", "1000000011001101001000010101110110100010101101110110001110010000001") == "1010000010101001110111011010000101111001100001100000001101101101001")
    assert(S2.addBinaryNumbers("101000001100101110001010111010111000100000001100110001011000000010", "1010101100011000010111010001011101011011010011011111011100111101011") == "1111101101111110001000101000110100011111010101000101100111111101101")
    assert(S2.addBinaryNumbers("101111100001101000000110010010101001110110000100111111110010111110", "10101010000101100000110011101010000100101000110001000001110011010") == "1000100110010010100001100101111111010011011001011001000000001011000")
    assert(S2.addBinaryNumbers("101010111001110100001011001000011100101010011100100001011011010010", "101111100010010011110000100101011001110101000010100000011110111111") == "1011010011100000111111011101101110110011111011111000001111010010001")
    assert(S2.addBinaryNumbers("1000100101001001011100110100101110100001001010110110110100101010101", "1000110011011000001011110011101101010001111110010101110011111111011") == "10001011000100001101000101000011011110011001001001100101000101010000")
    assert(S2.addBinaryNumbers("1001011101001110110010111101100100111000100110111010001011000010110", "111000001101100111110100011100010001001100000110000010011101101001") == "10000011110111011110001100001000111000010000111101010011110101111111")
    assert(S2.addBinaryNumbers("11001011010011010011011000000110000100100010100011010100111101101", "10011100000111100000001000000100101011001000010110111001010010001") == "101100111011010110011100000001010101111101010111010001110001111110")
    assert(S2.addBinaryNumbers("110110111000111000111001000001010000000101111011100010011001111100", "111010100110011001111001000010111001011000011010100010011111101001") == "1110001011111010010110010000100001001011110010110000100111001100101")
    assert(S2.addBinaryNumbers("101111010100000111001011000110110010101001010001011100001010100011", "11011000011100011010001010100010011010101001001110011000101011000") == "1001010010111101010011100011011000101111110011011001111001111111011")
    assert(S2.addBinaryNumbers("11001010111001001101111000001010000111100110110000111110101110010", "100101000001010010101111011100111110100011111010001011000010010100") == "111110011000011100011110011110001111100000110000010010111000000110")
    assert(S2.addBinaryNumbers("1010010000110110011100110101011101001011001001111110100010101110111", "10010101101000011011001001111001101000000111101011100111110110011") == "1100100110011110110111111111010110110011010001101010001010100101010")
    assert(S2.addBinaryNumbers("101111110111010010110100000100001110101011100000010101101000010101", "10000111100000010010101100110100100011111100110111110011010111010") == "1000000110011010101001001101010110011001011000111010100000011001111")
    assert(S2.addBinaryNumbers("10100011101011101111111000010000001100100001010110101001100110000", "1010101111100000001111011110100110011111000100100001010011101001") == "11111001100111110001110100000101000000011001111010110100000011001")
    assert(S2.addBinaryNumbers("110000010010010111010110001110010010110100010010111000001001001011", "1010101110110000101000011100110110111110001100110001110011000011101") == "10000110001000011100011001110101001010100101111001000110100001101000")
    assert(S2.addBinaryNumbers("11111111010101010101001100000010000110010001100101101011111000000", "1010011101100100100001110111101111110000001010011101110100010111100") == "1110011100111001110111000011110001110110011100000011100000001111100")
    assert(S2.addBinaryNumbers("100010001000000001000000111001010100011000011011001111100010011", "100110110010010010111100000001100001111110101000001111000010110001") == "101011000011010011000100001000101100100001101011101000111111000100")
    assert(S2.addBinaryNumbers("111111000011100001001010011101011000111000001000001111000010100011", "111010110100101111110010010110010100000000111011111110000101101") == "1000110011010000111001000110000001011011000001111101110110011010000")
    assert(S2.addBinaryNumbers("1001001111010000001000111111001111011100110100011000110110111010111", "100010110111011101000010010011010110111011000100001010011110100111") == "1101100110001011110001010001101010010100001100111010001010101111110")
    assert(S2.addBinaryNumbers("101100100011011010000101000001111000101110001100110001100110100101", "10000001110000110110010000001011110101010000000110010111010010101") == "111100110001100000110111000011010111011000001101100100100000111010")
    assert(S2.addBinaryNumbers("11001100110100111100010100100000001101011100011011111100101001011", "101100001111000001100001111000100001101011000101111111010001110") == "11111001000011111101110110011000101111000111100001111011111011001")
    assert(S2.addBinaryNumbers("101000001111110111011001010110101110010100001010100111101001100100", "110111110000101011001000001101110111111010001010100000110000000011") == "1100000000000100010100001100100100110001110010101001000011001100111")
    assert(S2.addBinaryNumbers("110101101000101011110011000010010100110110100111111000110111000010", "111110011001010101110001111111001011011101101011111110010011001110") == "1110100000010000001100101000001100000010100010011110111001010010000")
    assert(S2.addBinaryNumbers("11111110110000001101010101100101000101010001111101111101010110000", "111100100110110111111001000111011010100101111010010101110011110101") == "1011100011100111001100011110100000011010000001010000101011110100101")
    assert(S2.addBinaryNumbers("101010000101100101011110001100011000000011001011110001010111101011", "111011100111100011100110010001110111111001010110000111110010101110") == "1100101101101001001000100011110001111111100100001111001001010011001")
    assert(S2.addBinaryNumbers("10100011000010010100010111100100010111010010000110001101110110111", "10011100010101110011011110110101010101111110110100111101101100001") == "100111111011000000111110110011001101101010000111011001011100011000")
    assert(S2.addBinaryNumbers("111001010110000011111010011010001010100111000001010111010001010001", "101111000111100111100000000110100001100000011011101000100011111011") == "1101000011101101011011010100000101100000111011100111111110101001100")
    assert(S2.addBinaryNumbers("1110001101101010101100101100010100110010000000001000100111101", "11000100011000110111100000001010010010010011110001000001001000100") == "11010010100110100010001100110110100111000101110001001001110000001")
    assert(S2.addBinaryNumbers("100110110001101001110111100100001010010011000011000001001100010001", "111001111110110101001000100100000000111010000001101100110011001001") == "1100000110000011111000000001000001011001101000100101101111111011010")
    assert(S2.addBinaryNumbers("1110111010011001000001101100101110100101100101011010110110010111", "11111111000000011111111001111110101011010111101111110111011000") == "10010111001011001100001100110101101010000111101001010101101101111")
    assert(S2.addBinaryNumbers("1010100110001100101110001001110010011100110111110100001100010101011", "111011010010101011100010011010110010110010011110111101110011011000") == "10010000000100010001010011101001000110011001011101011111010110000011")
    assert(S2.addBinaryNumbers("1000010100011011111100001111011011101011110011000001100011111110001", "11010000010010111101101100111111111111110101100111010000010011010") == "1011100100101110111001111100011011101011101000101000110100010001011")
    assert(S2.addBinaryNumbers("110101010101010010101111011000000110110000110110010000010010101111", "110101101011111111000000011011101011111101100001100101110110000110") == "1101011000001010001101111110011110010101110010111110110001000110101")
    assert(S2.addBinaryNumbers("10011010111001001111011110000000000011001110101110010001010110111", "1001100111001100100011010001010110100000001110000000101000010010011") == "1100000010000101110010101111010110100011011100101110111001101001010")
    assert(S2.addBinaryNumbers("10011001101001111111110110010111101001101110000000011001011100111", "110100010010111111000111011011010001100011001111010110001100011001") == "1000111100000001111000110001110001110110000111111011001011000000000")
    assert(S2.addBinaryNumbers("10100011011001011101001010011010001001110010010010011001000010001", "1010001000011100001111101101111000101111100101010111000010111101111") == "1100101011110101101100111000010010111001010111101001011100000000000")
    assert(S2.addBinaryNumbers("10111001011100000111011000100100000100010001011001111100001100110", "110111011100100100010001011010101111001010111000110000111001011000") == "1001110101000000101001100011111001111101101000100000000011010111110")
    assert(S2.addBinaryNumbers("111100000000100110000111000011110010101011100100001111111110000001", "1001100101000000010101110011100100011100111111101011001011111101010") == "10001000101000101000110101100000010110010011100001101001011101101011")
    assert(S2.addBinaryNumbers("1010010011010110010111111110100110101111011001100110000111001000111", "100001000100011111001001001101001011101001001000111011000011001010") == "1110011011111010010001001000010000001100100010101101011111100010001")
    assert(S2.addBinaryNumbers("110001111111101101001000111010011000101110111100100101110100101", "1000001111011111111011011101011101110100101000001000111101011001100") == "1001000001011111101000100110011000001101010111000101100011001110001")
    assert(S2.addBinaryNumbers("100110010000110001000110100101011000000010001011000010010100100110", "100010100001000100111100010100010100101001000111010111000001111111") == "1001000110001110110000010111001101100101011010010011001010110100101")
    assert(S2.addBinaryNumbers("1001010100110011001011000001100100101000010011110000001111111110101", "1000101010110111100001101101111100011101001000011001000111001100000") == "10001111111101010101100101111100001000101011100001001010111001010101")
    assert(S2.addBinaryNumbers("1010100110110101101001100111111010100000000000011001110101011000000", "11001100100001100011101110001001000010010001111100000001101001010") == "1101110011010111001101010110000011100010010010010101110111000001010")
    assert(S2.addBinaryNumbers("101001000110111001010110100011011001001001111110110111000001110111", "1001100000001011010001000111101001010010111110011010100111010111101") == "1110101001000010011011111100000100011100001110010001011111100110100")
    assert(S2.addBinaryNumbers("101111101010101010100101011001000000001010101110100111111011000111", "1001011011110111110011000101011110001100111010000100111110001111111") == "1111011001001101000111110000100110001110001111111001111101101000110")
    assert(S2.addBinaryNumbers("10001101011011011111010100010010100000011111100110110010100111010", "110100010000000011110010000001001101010000001000000111110101010010") == "1000101111011011111101100100011100001010100000100111110001010001100")
    assert(S2.addBinaryNumbers("110000001101000001111110110100100111011001010000100010111001100101", "1001000010101001101001001110001100111011011101001110111100110110100") == "1111000100010001111001000100110001110110100111010011010100000011001")
    assert(S2.addBinaryNumbers("110010110110000101110010100011100111010110101001100001110111100101", "1000011010101101010000000010001110111101011110110111000110110011010") == "1110110001011101111110010110101011111000010100000011010101101111111")
    assert(S2.addBinaryNumbers("1010100111101001010000100011110110111101100011010111010011011011100", "1000000011010101101101100111111101101010110100011011000100010000010") == "10010101010111110111110001011110100101000010111110010010111101011110")
    assert(S2.addBinaryNumbers("111000010001111110101001110101010010011011000010001010100011101001", "10111111110100110001100111011101110000001001100111110011010100000") == "1010000010000100100110110110001000000011100001111001000111110001001")
    assert(S2.addBinaryNumbers("111001011001111010000110101000100111110111001000000011001011101001", "111010000101111010101100001010010111110001011000011111010111000110") == "1110011011111110100110010110010111111101000100000100010100010101111")
    assert(S2.addBinaryNumbers("1001000000101101100101110111011111001110100100011110010110010000010", "101001010011100000010010001010001111001001010101011100000011101101") == "1110001011001001101000001000110001000111101111001001110110101101111")
    assert(S2.addBinaryNumbers("10010111111111001001110111101010100110010100011101111010100110110", "1000111100101110001111011101000011000010000010001010111111101011110") == "1011010100101101011001010100101101101000010110101000111010010010100")
    assert(S2.addBinaryNumbers("1000100010000010101011011100001000100110001110110010010000111110010", "11101010100101110001001001100111101000011100100000010111111010100") == "1100001100101000011100100101110000001110101011010010101000111000110")
    assert(S2.addBinaryNumbers("1000000111101111100010110111100000100001100100001011001101111110110", "111000001100010010100001111110010101010111100111010100010001010") == "1000111111111011110101011001011110110110111011110010100010010000000")
    assert(S2.addBinaryNumbers("1000111110111001101100010101100101001100000010101001110011101011101", "1001101011110101101001000001010101001001010111110101110011011011101") == "10010101010101111010101010110111010010101011010011111100111000111010")
    assert(S2.addBinaryNumbers("10001011010101001000000000110000000110010101001011110100010001111", "110010000100000101100001111010011001100110110000001101010111011010") == "1000011011110101110100010000000011010011001011001101011111001101001")
    assert(S2.addBinaryNumbers("1001101101101010000101011000100111011000100100100110001110110001110", "1000001110100010001000001110100100101010000000010110000010110010000") == "10001111100001100001101100111001100000010100100111100010001100011110")
    assert(S2.addBinaryNumbers("110100101101101010000101010100000010000001111011010000011011000", "111000010010111111011101010110110010110111000010111101101001011001") == "111110111000101100101110000001010011000111010010010111101100110001")
    assert(S2.addBinaryNumbers("100010100110111000011100111101100101101011010101100100000000111101", "101101111110110011001110011101011101011111100111110100100110000000") == "1010000100101101011101011011011000011001010111101011000100110111101")
    assert(S2.addBinaryNumbers("11110011000110101010001001101011110011101111110111101011101100011", "101110000001011011100011011100110100100101111011100110100110101011") == "1001100011010010000110100101010010011000011111010100100000100001110")
    assert(S2.addBinaryNumbers("1000100100111000100000110110111100010100010101100010001001100001111", "1001010100000001001011110001110110001110010110110001011110111010111") == "10001111000111001101100101000110010100010101100010011101000011100110")
    assert(S2.addBinaryNumbers("10100001010001101001011100101010100001111111000000010111101110010", "101111110010000101010010010011011010010111111111001110001100101110") == "1000011111100010010011101111000101110100111110111010001001010100000")
  }


}
